//
// Generated by LLVM NVPTX Back-End
//

.version 8.7
.target sm_100a
.address_size 64

	// .globl	gluon_attention         // -- Begin function gluon_attention
.extern .shared .align 16 .b8 global_smem[];
.global .align 1 .b8 _$_str[11] = {95, 95, 67, 85, 68, 65, 95, 70, 84, 90};
                                        // @gluon_attention
.visible .entry gluon_attention(
	.param .f32 gluon_attention_param_0,
	.param .u64 .ptr .global .align 1 gluon_attention_param_1,
	.param .u32 gluon_attention_param_2,
	.param .u32 gluon_attention_param_3,
	.param .u32 gluon_attention_param_4,
	.param .align 64 .b8 gluon_attention_param_5[128],
	.param .u32 gluon_attention_param_6,
	.param .u32 gluon_attention_param_7,
	.param .u64 gluon_attention_param_8,
	.param .u64 gluon_attention_param_9,
	.param .align 64 .b8 gluon_attention_param_10[128],
	.param .u32 gluon_attention_param_11,
	.param .u32 gluon_attention_param_12,
	.param .u64 gluon_attention_param_13,
	.param .u64 gluon_attention_param_14,
	.param .align 64 .b8 gluon_attention_param_15[128],
	.param .u32 gluon_attention_param_16,
	.param .u32 gluon_attention_param_17,
	.param .u64 gluon_attention_param_18,
	.param .u64 gluon_attention_param_19,
	.param .align 64 .b8 gluon_attention_param_20[128],
	.param .u32 gluon_attention_param_21,
	.param .u32 gluon_attention_param_22,
	.param .u64 gluon_attention_param_23,
	.param .u64 gluon_attention_param_24,
	.param .u64 .ptr .global .align 1 gluon_attention_param_25
)
.reqntid 512
.maxnreg 128
{
	.reg .pred 	%p<298>;
	.reg .b16 	%rs<193>;
	.reg .b32 	%r<4931>;
	.reg .b64 	%rd<112>;
	.loc	1 826 0                         // 01-attention-forward.py:826:0
$L__func_begin0:
	.loc	1 826 0                         // 01-attention-forward.py:826:0

// %bb.0:
	ld.param.b32 	%r199, [gluon_attention_param_4];
	ld.param.b32 	%r198, [gluon_attention_param_3];
	ld.param.b32 	%r197, [gluon_attention_param_2];
	mov.b64 	%rd23, gluon_attention_param_20;
$L__tmp0:
	.loc	1 826 0                         // 01-attention-forward.py:826
	cvta.param.u64 	%rd1, %rd23;
	mov.b64 	%rd24, gluon_attention_param_15;
	cvta.param.u64 	%rd2, %rd24;
	mov.b64 	%rd25, gluon_attention_param_5;
	mov.b64 	%rd26, gluon_attention_param_10;
	cvta.param.u64 	%rd3, %rd26;
	cvta.param.u64 	%rd4, %rd25;
	mov.u32 	%r1, %tid.x;
	shr.u32 	%r2, %r1, 5;
	shfl.sync.idx.b32 	%r3, %r2, 0, 31, -1;
	setp.lt.u32 	%p2, %r3, 4;
	mov.b32 	%r4852, global_smem;
	and.b32 	%r4853, %r1, 127;
	add.s32 	%r4855, %r199, 255;
	mul.lo.s32 	%r4856, %r198, %r197;
	shr.s32 	%r4857, %r199, 31;
	setp.lt.s32 	%p296, %r199, 256;
	@%p2 bra 	$L__BB0_38;
	bra.uni 	$L__BB0_1;
$L__BB0_38:
	setmaxnreg.inc.sync.aligned.u32 	256;
	setp.lt.u32 	%p164, %r1, 32;
	// begin inline asm
	@%p164 tcgen05.alloc.cta_group::1.sync.aligned.shared::cta.b32 [%r4852], 512;
	// end inline asm
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	ld.shared.b32 	%r4849, [global_smem];
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p164 tcgen05.relinquish_alloc_permit.cta_group::1.sync.aligned;
	// end inline asm
$L__tmp1:
	.loc	1 137 22                        // 01-attention-forward.py:137:22 @[ 01-attention-forward.py:835:30 ]
	setp.eq.s32 	%p258, %r4853, 0;
	add.s32 	%r3257, %r4852, 98832;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3257], 1;
	// end inline asm
	.loc	1 138 22                        // 01-attention-forward.py:138:22 @[ 01-attention-forward.py:835:30 ]
	add.s32 	%r3258, %r4852, 98848;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3258], 1;
	// end inline asm
	.loc	1 139 24                        // 01-attention-forward.py:139:24 @[ 01-attention-forward.py:835:30 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.arrive.shared::cta.b64 _, [%r3258];
	// end inline asm
	.loc	1 137 22                        // 01-attention-forward.py:137:22 @[ 01-attention-forward.py:835:30 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	add.s32 	%r3260, %r4852, 98840;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3260], 1;
	// end inline asm
	.loc	1 138 22                        // 01-attention-forward.py:138:22 @[ 01-attention-forward.py:835:30 ]
	add.s32 	%r3261, %r4852, 98856;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3261], 1;
	// end inline asm
	.loc	1 139 24                        // 01-attention-forward.py:139:24 @[ 01-attention-forward.py:835:30 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.arrive.shared::cta.b64 _, [%r3261];
	// end inline asm
$L__tmp2:
	.loc	1 137 22                        // 01-attention-forward.py:137:22 @[ 01-attention-forward.py:836:31 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	add.s32 	%r3263, %r4852, 98704;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3263], 1;
	// end inline asm
	.loc	1 138 22                        // 01-attention-forward.py:138:22 @[ 01-attention-forward.py:836:31 ]
	add.s32 	%r3264, %r4852, 98768;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3264], 1;
	// end inline asm
	.loc	1 139 24                        // 01-attention-forward.py:139:24 @[ 01-attention-forward.py:836:31 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.arrive.shared::cta.b64 _, [%r3264];
	// end inline asm
	.loc	1 137 22                        // 01-attention-forward.py:137:22 @[ 01-attention-forward.py:836:31 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	add.s32 	%r3266, %r4852, 98712;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3266], 1;
	// end inline asm
	.loc	1 138 22                        // 01-attention-forward.py:138:22 @[ 01-attention-forward.py:836:31 ]
	add.s32 	%r3267, %r4852, 98776;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3267], 1;
	// end inline asm
	.loc	1 139 24                        // 01-attention-forward.py:139:24 @[ 01-attention-forward.py:836:31 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.arrive.shared::cta.b64 _, [%r3267];
	// end inline asm
	.loc	1 137 22                        // 01-attention-forward.py:137:22 @[ 01-attention-forward.py:836:31 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	add.s32 	%r3269, %r4852, 98720;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3269], 1;
	// end inline asm
	.loc	1 138 22                        // 01-attention-forward.py:138:22 @[ 01-attention-forward.py:836:31 ]
	add.s32 	%r3270, %r4852, 98784;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3270], 1;
	// end inline asm
	.loc	1 139 24                        // 01-attention-forward.py:139:24 @[ 01-attention-forward.py:836:31 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.arrive.shared::cta.b64 _, [%r3270];
	// end inline asm
	.loc	1 137 22                        // 01-attention-forward.py:137:22 @[ 01-attention-forward.py:836:31 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	add.s32 	%r3272, %r4852, 98728;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3272], 1;
	// end inline asm
	.loc	1 138 22                        // 01-attention-forward.py:138:22 @[ 01-attention-forward.py:836:31 ]
	add.s32 	%r3273, %r4852, 98792;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3273], 1;
	// end inline asm
	.loc	1 139 24                        // 01-attention-forward.py:139:24 @[ 01-attention-forward.py:836:31 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.arrive.shared::cta.b64 _, [%r3273];
	// end inline asm
	.loc	1 137 22                        // 01-attention-forward.py:137:22 @[ 01-attention-forward.py:836:31 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	add.s32 	%r3275, %r4852, 98736;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3275], 1;
	// end inline asm
	.loc	1 138 22                        // 01-attention-forward.py:138:22 @[ 01-attention-forward.py:836:31 ]
	add.s32 	%r3276, %r4852, 98800;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3276], 1;
	// end inline asm
	.loc	1 139 24                        // 01-attention-forward.py:139:24 @[ 01-attention-forward.py:836:31 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.arrive.shared::cta.b64 _, [%r3276];
	// end inline asm
	.loc	1 137 22                        // 01-attention-forward.py:137:22 @[ 01-attention-forward.py:836:31 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	add.s32 	%r3278, %r4852, 98744;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3278], 1;
	// end inline asm
	.loc	1 138 22                        // 01-attention-forward.py:138:22 @[ 01-attention-forward.py:836:31 ]
	add.s32 	%r3279, %r4852, 98808;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3279], 1;
	// end inline asm
	.loc	1 139 24                        // 01-attention-forward.py:139:24 @[ 01-attention-forward.py:836:31 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.arrive.shared::cta.b64 _, [%r3279];
	// end inline asm
	.loc	1 137 22                        // 01-attention-forward.py:137:22 @[ 01-attention-forward.py:836:31 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	add.s32 	%r3281, %r4852, 98752;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3281], 1;
	// end inline asm
	.loc	1 138 22                        // 01-attention-forward.py:138:22 @[ 01-attention-forward.py:836:31 ]
	add.s32 	%r3282, %r4852, 98816;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3282], 1;
	// end inline asm
	.loc	1 139 24                        // 01-attention-forward.py:139:24 @[ 01-attention-forward.py:836:31 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.arrive.shared::cta.b64 _, [%r3282];
	// end inline asm
	.loc	1 137 22                        // 01-attention-forward.py:137:22 @[ 01-attention-forward.py:836:31 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	add.s32 	%r3284, %r4852, 98760;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3284], 1;
	// end inline asm
	.loc	1 138 22                        // 01-attention-forward.py:138:22 @[ 01-attention-forward.py:836:31 ]
	add.s32 	%r3285, %r4852, 98824;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3285], 1;
	// end inline asm
	.loc	1 139 24                        // 01-attention-forward.py:139:24 @[ 01-attention-forward.py:836:31 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.arrive.shared::cta.b64 _, [%r3285];
	// end inline asm
$L__tmp3:
	.loc	1 137 22                        // 01-attention-forward.py:137:22 @[ 01-attention-forward.py:837:67 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	add.s32 	%r3287, %r4852, 98864;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3287], 1;
	// end inline asm
	.loc	1 138 22                        // 01-attention-forward.py:138:22 @[ 01-attention-forward.py:837:67 ]
	add.s32 	%r3288, %r4852, 98880;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3288], 1;
	// end inline asm
	.loc	1 139 24                        // 01-attention-forward.py:139:24 @[ 01-attention-forward.py:837:67 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.arrive.shared::cta.b64 _, [%r3288];
	// end inline asm
	.loc	1 137 22                        // 01-attention-forward.py:137:22 @[ 01-attention-forward.py:837:67 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	add.s32 	%r3290, %r4852, 98872;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3290], 1;
	// end inline asm
	.loc	1 138 22                        // 01-attention-forward.py:138:22 @[ 01-attention-forward.py:837:67 ]
	add.s32 	%r3291, %r4852, 98888;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3291], 1;
	// end inline asm
	.loc	1 139 24                        // 01-attention-forward.py:139:24 @[ 01-attention-forward.py:837:67 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.arrive.shared::cta.b64 _, [%r3291];
	// end inline asm
$L__tmp4:
	.loc	1 137 22                        // 01-attention-forward.py:137:22 @[ 01-attention-forward.py:838:71 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	add.s32 	%r3293, %r4852, 98896;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3293], 1;
	// end inline asm
	.loc	1 138 22                        // 01-attention-forward.py:138:22 @[ 01-attention-forward.py:838:71 ]
	add.s32 	%r3294, %r4852, 98912;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3294], 1;
	// end inline asm
	.loc	1 139 24                        // 01-attention-forward.py:139:24 @[ 01-attention-forward.py:838:71 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.arrive.shared::cta.b64 _, [%r3294];
	// end inline asm
	.loc	1 137 22                        // 01-attention-forward.py:137:22 @[ 01-attention-forward.py:838:71 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	add.s32 	%r3296, %r4852, 98904;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3296], 1;
	// end inline asm
	.loc	1 138 22                        // 01-attention-forward.py:138:22 @[ 01-attention-forward.py:838:71 ]
	add.s32 	%r3297, %r4852, 98920;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3297], 1;
	// end inline asm
	.loc	1 139 24                        // 01-attention-forward.py:139:24 @[ 01-attention-forward.py:838:71 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.arrive.shared::cta.b64 _, [%r3297];
	// end inline asm
$L__tmp5:
	.loc	1 133 49                        // 01-attention-forward.py:133:49 @[ 01-attention-forward.py:839:69 ]
	add.s32 	%r3311, %r4849, 128;
	.loc	1 137 22                        // 01-attention-forward.py:137:22 @[ 01-attention-forward.py:839:69 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	add.s32 	%r3299, %r4852, 98944;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3299], 1;
	// end inline asm
	.loc	1 138 22                        // 01-attention-forward.py:138:22 @[ 01-attention-forward.py:839:69 ]
	add.s32 	%r3300, %r4852, 98960;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3300], 1;
	// end inline asm
	.loc	1 139 24                        // 01-attention-forward.py:139:24 @[ 01-attention-forward.py:839:69 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.arrive.shared::cta.b64 _, [%r3300];
	// end inline asm
$L__tmp6:
	.loc	1 133 49                        // 01-attention-forward.py:133:49 @[ 01-attention-forward.py:840:69 ]
	add.s32 	%r3312, %r4849, 256;
	.loc	1 137 22                        // 01-attention-forward.py:137:22 @[ 01-attention-forward.py:840:69 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	add.s32 	%r3302, %r4852, 98976;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3302], 1;
	// end inline asm
	.loc	1 138 22                        // 01-attention-forward.py:138:22 @[ 01-attention-forward.py:840:69 ]
	add.s32 	%r3303, %r4852, 98992;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3303], 1;
	// end inline asm
	.loc	1 139 24                        // 01-attention-forward.py:139:24 @[ 01-attention-forward.py:840:69 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.arrive.shared::cta.b64 _, [%r3303];
	// end inline asm
$L__tmp7:
	.loc	1 137 22                        // 01-attention-forward.py:137:22 @[ 01-attention-forward.py:841:54 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	add.s32 	%r3305, %r4852, 99008;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3305], 1;
	// end inline asm
	.loc	1 138 22                        // 01-attention-forward.py:138:22 @[ 01-attention-forward.py:841:54 ]
	add.s32 	%r3306, %r4852, 99024;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3306], 1;
	// end inline asm
	.loc	1 139 24                        // 01-attention-forward.py:139:24 @[ 01-attention-forward.py:841:54 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.arrive.shared::cta.b64 _, [%r3306];
	// end inline asm
$L__tmp8:
	.loc	1 137 22                        // 01-attention-forward.py:137:22 @[ 01-attention-forward.py:842:54 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	add.s32 	%r3308, %r4852, 99040;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3308], 1;
	// end inline asm
	.loc	1 138 22                        // 01-attention-forward.py:138:22 @[ 01-attention-forward.py:842:54 ]
	add.s32 	%r3309, %r4852, 99056;
	// begin inline asm
	@%p258 mbarrier.init.shared::cta.b64 [%r3309], 1;
	// end inline asm
	.loc	1 139 24                        // 01-attention-forward.py:139:24 @[ 01-attention-forward.py:842:54 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.arrive.shared::cta.b64 _, [%r3309];
	// end inline asm
	mov.b32 	%r3313, 16843009;
	mov.b32 	%r4915, 0;
	st.shared.v2.b32 	[global_smem+98928], {%r4915, %r3313};
	mov.b32 	%r3315, 84148994;
	st.shared.b32 	[global_smem+98936], %r3315;
	st.shared.b32 	[global_smem+98304], %r4849;
	st.shared.b32 	[global_smem+98312], %r3311;
	st.shared.b32 	[global_smem+98320], %r3312;
	// begin inline asm
	barrier.sync 1 ;
	// end inline asm
	setmaxnreg.dec.sync.aligned.u32 	104;
	// begin inline asm
	barrier.sync 1 ;
	// end inline asm
$L__tmp9:
	.loc	1 370 30                        // 01-attention-forward.py:370:30 @[ 01-attention-forward.py:796:40 ]
	mov.u32 	%r4919, %ctaid.x;
	.loc	2 40 28                         // standard.py:40:28 @[ 01-attention-forward.py:796:40 ]
	shr.s32 	%r3317, %r4855, 31;
	shr.u32 	%r3318, %r3317, 24;
	add.s32 	%r3319, %r4855, %r3318;
	shr.s32 	%r3320, %r3319, 8;
	.loc	1 374 28                        // 01-attention-forward.py:374:28 @[ 01-attention-forward.py:796:40 ]
	mul.lo.s32 	%r141, %r3320, %r4856;
$L__tmp10:
	.loc	1 797 63                        // 01-attention-forward.py:797:63
	setp.ge.s32 	%p220, %r4919, %r141;
	@%p220 bra 	$L__BB0_48;
// %bb.39:                              // %.lr.ph908
	.loc	1 0 63                          // 01-attention-forward.py:0:63
	ld.param.b64 	%rd22, [gluon_attention_param_1];
	shl.b32 	%r140, %r3320, 3;
	shr.u32 	%r3323, %r4857, 25;
	add.s32 	%r3324, %r199, %r3323;
	shr.s32 	%r3325, %r3324, 7;
	add.s32 	%r142, %r4849, 192;
	add.s32 	%r143, %r4849, 320;
	add.s32 	%r144, %r4849, 64;
	add.s32 	%r145, %r4849, 193;
	add.s32 	%r146, %r4849, 194;
	shl.b32 	%r3326, %r4853, 6;
	shl.b32 	%r3327, %r1, 3;
	and.b32 	%r3328, %r3327, 48;
	or.b32 	%r3329, %r3326, %r3328;
	add.s32 	%r3331, %r4852, 81920;
	add.s32 	%r147, %r3331, %r3329;
	xor.b32 	%r3332, %r3329, 16;
	add.s32 	%r148, %r3331, %r3332;
	xor.b32 	%r3333, %r3329, 32;
	add.s32 	%r149, %r3331, %r3333;
	xor.b32 	%r3334, %r3329, 48;
	add.s32 	%r150, %r3331, %r3334;
	add.s32 	%r151, %r4849, 321;
	add.s32 	%r152, %r4849, 322;
	add.s32 	%r3335, %r4852, 90112;
	add.s32 	%r153, %r3335, %r3329;
	add.s32 	%r154, %r3335, %r3332;
	add.s32 	%r155, %r3335, %r3333;
	add.s32 	%r156, %r3335, %r3334;
	.loc	1 797 63                        // 01-attention-forward.py:797:63
	max.s32 	%r3336, %r3325, 2;
	add.s32 	%r157, %r3336, -1;
	mov.b32 	%r4926, %r4915;
	mov.b32 	%r4925, %r4915;
	mov.b32 	%r4924, %r4915;
	bra.uni 	$L__BB0_40;
$L__BB0_47:                             // %__nv_log2f.exit823
                                        //   in Loop: Header=BB0_40 Depth=1
$L__tmp11:
	.loc	1 0 0                           // 01-attention-forward.py:0 @[ 01-attention-forward.py:814:68 ]
	xor.b32 	%r4915, %r4915, 1;
	xor.b32 	%r4926, %r4926, 1;
	.loc	1 774 19                        // 01-attention-forward.py:774:19 @[ 01-attention-forward.py:814:68 ]
	setp.eq.f32 	%p256, %r191, 0f00000000;
	selp.f32 	%r4812, 0fFF800000, %r4930, %p256;
	.loc	1 774 11                        // 01-attention-forward.py:774:11 @[ 01-attention-forward.py:814:68 ]
	add.f32 	%r4811, %r4812, %r4420;
	.loc	1 779 21                        // 01-attention-forward.py:779:21 @[ 01-attention-forward.py:814:68 ]
	// begin inline asm
	st.global.b32 [ %rd107 + 0 ], { %r4811 };
	// end inline asm
$L__tmp12:
	.loc	1 797 63                        // 01-attention-forward.py:797:63
	add.s32 	%r4919, %r4919, 78;
	setp.lt.s32 	%p257, %r4919, %r141;
	@%p257 bra 	$L__BB0_40;
	bra.uni 	$L__BB0_48;
$L__BB0_40:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_42 Depth 2
$L__tmp13:
	.loc	1 379 26                        // 01-attention-forward.py:379:26 @[ 01-attention-forward.py:798:37 ]
	div.s32 	%r3344, %r4919, %r140;
	.loc	1 380 29                        // 01-attention-forward.py:380:29 @[ 01-attention-forward.py:798:37 ]
	shl.b32 	%r3345, %r3344, 3;
	.loc	1 381 40                        // 01-attention-forward.py:381:40 @[ 01-attention-forward.py:798:37 ]
	sub.s32 	%r3346, %r4856, %r3345;
	.loc	1 381 53                        // 01-attention-forward.py:381:53 @[ 01-attention-forward.py:798:37 ]
	min.s32 	%r3347, %r3346, 8;
	.loc	1 382 37                        // 01-attention-forward.py:382:37 @[ 01-attention-forward.py:798:37 ]
	rem.s32 	%r3348, %r4919, %r3347;
	.loc	1 383 23                        // 01-attention-forward.py:383:23 @[ 01-attention-forward.py:798:37 ]
	mul.lo.s32 	%r3349, %r3344, %r140;
	sub.s32 	%r3350, %r4919, %r3349;
$L__tmp14:
	.loc	1 167 29                        // 01-attention-forward.py:167:29 @[ 01-attention-forward.py:802:39 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	mov.pred 	%p239, -1;
	// begin inline asm
	
{
	@!%p239 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r3305], %r4924;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
$L__tmp15:
	.loc	1 803 24                        // 01-attention-forward.py:803:24
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.arrive.shared::cta.b64 _, [%r3306];
	// end inline asm
$L__tmp16:
	.loc	1 167 29                        // 01-attention-forward.py:167:29 @[ 01-attention-forward.py:804:39 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	
{
	@!%p239 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r3308], %r4925;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
$L__tmp17:
	.loc	1 805 24                        // 01-attention-forward.py:805:24
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.arrive.shared::cta.b64 _, [%r3309];
	// end inline asm
$L__tmp18:
	.loc	1 145 40                        // 01-attention-forward.py:145:40 @[ 01-attention-forward.py:0 ]
	xor.b32 	%r4927, %r4925, 1;
	xor.b32 	%r4928, %r4924, 1;
$L__tmp19:
	.loc	1 807 23                        // 01-attention-forward.py:807:23
	@%p296 bra 	$L__BB0_43;
// %bb.41:                              // %.lr.ph900.preheader
                                        //   in Loop: Header=BB0_40 Depth=1
	.loc	1 0 23                          // 01-attention-forward.py:0:23
	mov.b32 	%r4920, %r157;
$L__BB0_42:                             // %.lr.ph900
                                        //   Parent Loop BB0_40 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.b32 	%r4925, %r4927;
	mov.b32 	%r4924, %r4928;
$L__tmp20:
	.loc	1 167 29                        // 01-attention-forward.py:167:29 @[ 01-attention-forward.py:808:103 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	mov.pred 	%p226, -1;
	// begin inline asm
	
{
	@!%p226 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r3305], %r4924;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
	.loc	1 725 52                        // 01-attention-forward.py:725:52 @[ 01-attention-forward.py:808:103 ]
	shfl.sync.idx.b32 	%r4017, %r2, 0, 31, -1;
	shr.u32 	%r4018, %r4017, 2;
	shl.b32 	%r4019, %r4017, 21;
	and.b32 	%r4020, %r4019, 6291456;
	add.s32 	%r4021, %r142, %r4018;
	add.s32 	%r3355, %r4021, %r4020;
	// begin inline asm
	tcgen05.ld.sync.aligned.32x32b.x1.b32 {%r3396}, [%r3355 + 0];
	// end inline asm
	// begin inline asm
	tcgen05.wait::ld.sync.aligned;
	// end inline asm
	.loc	1 726 20                        // 01-attention-forward.py:726:20 @[ 01-attention-forward.py:808:103 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.arrive.shared::cta.b64 _, [%r3306];
	// end inline asm
	.loc	1 167 29                        // 01-attention-forward.py:167:29 @[ 01-attention-forward.py:808:103 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	
{
	@!%p226 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r3287], %r4926;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
	.loc	1 732 23                        // 01-attention-forward.py:732:23 @[ 01-attention-forward.py:808:103 ]
	shl.b32 	%r4022, %r4018, 5;
	add.s32 	%r4023, %r4020, %r4849;
	add.s32 	%r3391, %r4023, %r4022;
	// begin inline asm
	tcgen05.ld.sync.aligned.32x32b.x32.b32 {%r3359, %r3360, %r3361, %r3362, %r3363, %r3364, %r3365, %r3366, %r3367, %r3368, %r3369, %r3370, %r3371, %r3372, %r3373, %r3374, %r3375, %r3376, %r3377, %r3378, %r3379, %r3380, %r3381, %r3382, %r3383, %r3384, %r3385, %r3386, %r3387, %r3388, %r3389, %r3390}, [%r3391 + 0];
	// end inline asm
	// begin inline asm
	tcgen05.wait::ld.sync.aligned;
	// end inline asm
	.loc	1 464 8                         // 01-attention-forward.py:464:8 @[ 01-attention-forward.py:808:103 ]
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3359, %r3360 };
            mov.b64 rb, { %r3396, %r3396 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3392, %r3393 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3361, %r3362 };
            mov.b64 rb, { %r3396, %r3396 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3398, %r3399 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3363, %r3364 };
            mov.b64 rb, { %r3396, %r3396 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3404, %r3405 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3365, %r3366 };
            mov.b64 rb, { %r3396, %r3396 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3410, %r3411 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3367, %r3368 };
            mov.b64 rb, { %r3396, %r3396 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3416, %r3417 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3369, %r3370 };
            mov.b64 rb, { %r3396, %r3396 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3422, %r3423 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3371, %r3372 };
            mov.b64 rb, { %r3396, %r3396 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3428, %r3429 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3373, %r3374 };
            mov.b64 rb, { %r3396, %r3396 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3434, %r3435 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3375, %r3376 };
            mov.b64 rb, { %r3396, %r3396 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3440, %r3441 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3377, %r3378 };
            mov.b64 rb, { %r3396, %r3396 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3446, %r3447 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3379, %r3380 };
            mov.b64 rb, { %r3396, %r3396 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3452, %r3453 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3381, %r3382 };
            mov.b64 rb, { %r3396, %r3396 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3458, %r3459 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3383, %r3384 };
            mov.b64 rb, { %r3396, %r3396 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3464, %r3465 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3385, %r3386 };
            mov.b64 rb, { %r3396, %r3396 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3470, %r3471 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3387, %r3388 };
            mov.b64 rb, { %r3396, %r3396 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3476, %r3477 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3389, %r3390 };
            mov.b64 rb, { %r3396, %r3396 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3482, %r3483 }, rc;
        }
        
	// end inline asm
	.loc	1 734 20                        // 01-attention-forward.py:734:20 @[ 01-attention-forward.py:808:103 ]
	// begin inline asm
	@%p226 tcgen05.st.sync.aligned.32x32b.x32.b32 [%r3391 + 0], {%r3392, %r3393, %r3398, %r3399, %r3404, %r3405, %r3410, %r3411, %r3416, %r3417, %r3422, %r3423, %r3428, %r3429, %r3434, %r3435, %r3440, %r3441, %r3446, %r3447, %r3452, %r3453, %r3458, %r3459, %r3464, %r3465, %r3470, %r3471, %r3476, %r3477, %r3482, %r3483};
	// end inline asm
	// begin inline asm
	tcgen05.wait::st.sync.aligned;
	// end inline asm
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	.loc	1 732 23                        // 01-attention-forward.py:732:23 @[ 01-attention-forward.py:808:103 ]
	add.s32 	%r3553, %r3391, 32;
	// begin inline asm
	tcgen05.ld.sync.aligned.32x32b.x32.b32 {%r3521, %r3522, %r3523, %r3524, %r3525, %r3526, %r3527, %r3528, %r3529, %r3530, %r3531, %r3532, %r3533, %r3534, %r3535, %r3536, %r3537, %r3538, %r3539, %r3540, %r3541, %r3542, %r3543, %r3544, %r3545, %r3546, %r3547, %r3548, %r3549, %r3550, %r3551, %r3552}, [%r3553 + 0];
	// end inline asm
	// begin inline asm
	tcgen05.wait::ld.sync.aligned;
	// end inline asm
	.loc	1 464 8                         // 01-attention-forward.py:464:8 @[ 01-attention-forward.py:808:103 ]
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3521, %r3522 };
            mov.b64 rb, { %r3396, %r3396 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3554, %r3555 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3523, %r3524 };
            mov.b64 rb, { %r3396, %r3396 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3560, %r3561 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3525, %r3526 };
            mov.b64 rb, { %r3396, %r3396 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3566, %r3567 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3527, %r3528 };
            mov.b64 rb, { %r3396, %r3396 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3572, %r3573 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3529, %r3530 };
            mov.b64 rb, { %r3396, %r3396 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3578, %r3579 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3531, %r3532 };
            mov.b64 rb, { %r3396, %r3396 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3584, %r3585 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3533, %r3534 };
            mov.b64 rb, { %r3396, %r3396 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3590, %r3591 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3535, %r3536 };
            mov.b64 rb, { %r3396, %r3396 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3596, %r3597 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3537, %r3538 };
            mov.b64 rb, { %r3396, %r3396 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3602, %r3603 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3539, %r3540 };
            mov.b64 rb, { %r3396, %r3396 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3608, %r3609 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3541, %r3542 };
            mov.b64 rb, { %r3396, %r3396 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3614, %r3615 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3543, %r3544 };
            mov.b64 rb, { %r3396, %r3396 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3620, %r3621 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3545, %r3546 };
            mov.b64 rb, { %r3396, %r3396 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3626, %r3627 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3547, %r3548 };
            mov.b64 rb, { %r3396, %r3396 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3632, %r3633 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3549, %r3550 };
            mov.b64 rb, { %r3396, %r3396 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3638, %r3639 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3551, %r3552 };
            mov.b64 rb, { %r3396, %r3396 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3644, %r3645 }, rc;
        }
        
	// end inline asm
	.loc	1 734 20                        // 01-attention-forward.py:734:20 @[ 01-attention-forward.py:808:103 ]
	// begin inline asm
	@%p226 tcgen05.st.sync.aligned.32x32b.x32.b32 [%r3553 + 0], {%r3554, %r3555, %r3560, %r3561, %r3566, %r3567, %r3572, %r3573, %r3578, %r3579, %r3584, %r3585, %r3590, %r3591, %r3596, %r3597, %r3602, %r3603, %r3608, %r3609, %r3614, %r3615, %r3620, %r3621, %r3626, %r3627, %r3632, %r3633, %r3638, %r3639, %r3644, %r3645};
	// end inline asm
	// begin inline asm
	tcgen05.wait::st.sync.aligned;
	// end inline asm
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	.loc	1 735 20                        // 01-attention-forward.py:735:20 @[ 01-attention-forward.py:808:103 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.arrive.shared::cta.b64 _, [%r3288];
	// end inline asm
$L__tmp21:
	.loc	1 167 29                        // 01-attention-forward.py:167:29 @[ 01-attention-forward.py:809:103 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	
{
	@!%p226 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r3308], %r4925;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
	.loc	1 725 52                        // 01-attention-forward.py:725:52 @[ 01-attention-forward.py:809:103 ]
	add.s32 	%r4024, %r143, %r4018;
	add.s32 	%r3687, %r4024, %r4020;
	// begin inline asm
	tcgen05.ld.sync.aligned.32x32b.x1.b32 {%r3728}, [%r3687 + 0];
	// end inline asm
	// begin inline asm
	tcgen05.wait::ld.sync.aligned;
	// end inline asm
	.loc	1 726 20                        // 01-attention-forward.py:726:20 @[ 01-attention-forward.py:809:103 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.arrive.shared::cta.b64 _, [%r3309];
	// end inline asm
	.loc	1 167 29                        // 01-attention-forward.py:167:29 @[ 01-attention-forward.py:809:103 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	
{
	@!%p226 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r3290], %r4926;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
	.loc	1 149 39                        // 01-attention-forward.py:149:39 @[ 01-attention-forward.py:809:103 ]
	xor.b32 	%r4926, %r4926, 1;
	.loc	1 732 23                        // 01-attention-forward.py:732:23 @[ 01-attention-forward.py:809:103 ]
	add.s32 	%r4025, %r144, %r4020;
	add.s32 	%r3723, %r4025, %r4022;
	// begin inline asm
	tcgen05.ld.sync.aligned.32x32b.x32.b32 {%r3691, %r3692, %r3693, %r3694, %r3695, %r3696, %r3697, %r3698, %r3699, %r3700, %r3701, %r3702, %r3703, %r3704, %r3705, %r3706, %r3707, %r3708, %r3709, %r3710, %r3711, %r3712, %r3713, %r3714, %r3715, %r3716, %r3717, %r3718, %r3719, %r3720, %r3721, %r3722}, [%r3723 + 0];
	// end inline asm
	// begin inline asm
	tcgen05.wait::ld.sync.aligned;
	// end inline asm
	.loc	1 464 8                         // 01-attention-forward.py:464:8 @[ 01-attention-forward.py:809:103 ]
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3691, %r3692 };
            mov.b64 rb, { %r3728, %r3728 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3724, %r3725 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3693, %r3694 };
            mov.b64 rb, { %r3728, %r3728 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3730, %r3731 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3695, %r3696 };
            mov.b64 rb, { %r3728, %r3728 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3736, %r3737 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3697, %r3698 };
            mov.b64 rb, { %r3728, %r3728 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3742, %r3743 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3699, %r3700 };
            mov.b64 rb, { %r3728, %r3728 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3748, %r3749 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3701, %r3702 };
            mov.b64 rb, { %r3728, %r3728 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3754, %r3755 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3703, %r3704 };
            mov.b64 rb, { %r3728, %r3728 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3760, %r3761 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3705, %r3706 };
            mov.b64 rb, { %r3728, %r3728 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3766, %r3767 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3707, %r3708 };
            mov.b64 rb, { %r3728, %r3728 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3772, %r3773 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3709, %r3710 };
            mov.b64 rb, { %r3728, %r3728 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3778, %r3779 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3711, %r3712 };
            mov.b64 rb, { %r3728, %r3728 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3784, %r3785 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3713, %r3714 };
            mov.b64 rb, { %r3728, %r3728 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3790, %r3791 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3715, %r3716 };
            mov.b64 rb, { %r3728, %r3728 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3796, %r3797 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3717, %r3718 };
            mov.b64 rb, { %r3728, %r3728 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3802, %r3803 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3719, %r3720 };
            mov.b64 rb, { %r3728, %r3728 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3808, %r3809 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3721, %r3722 };
            mov.b64 rb, { %r3728, %r3728 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3814, %r3815 }, rc;
        }
        
	// end inline asm
	.loc	1 734 20                        // 01-attention-forward.py:734:20 @[ 01-attention-forward.py:809:103 ]
	// begin inline asm
	@%p226 tcgen05.st.sync.aligned.32x32b.x32.b32 [%r3723 + 0], {%r3724, %r3725, %r3730, %r3731, %r3736, %r3737, %r3742, %r3743, %r3748, %r3749, %r3754, %r3755, %r3760, %r3761, %r3766, %r3767, %r3772, %r3773, %r3778, %r3779, %r3784, %r3785, %r3790, %r3791, %r3796, %r3797, %r3802, %r3803, %r3808, %r3809, %r3814, %r3815};
	// end inline asm
	// begin inline asm
	tcgen05.wait::st.sync.aligned;
	// end inline asm
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	.loc	1 732 23                        // 01-attention-forward.py:732:23 @[ 01-attention-forward.py:809:103 ]
	add.s32 	%r3885, %r3391, 96;
	// begin inline asm
	tcgen05.ld.sync.aligned.32x32b.x32.b32 {%r3853, %r3854, %r3855, %r3856, %r3857, %r3858, %r3859, %r3860, %r3861, %r3862, %r3863, %r3864, %r3865, %r3866, %r3867, %r3868, %r3869, %r3870, %r3871, %r3872, %r3873, %r3874, %r3875, %r3876, %r3877, %r3878, %r3879, %r3880, %r3881, %r3882, %r3883, %r3884}, [%r3885 + 0];
	// end inline asm
	// begin inline asm
	tcgen05.wait::ld.sync.aligned;
	// end inline asm
	.loc	1 464 8                         // 01-attention-forward.py:464:8 @[ 01-attention-forward.py:809:103 ]
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3853, %r3854 };
            mov.b64 rb, { %r3728, %r3728 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3886, %r3887 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3855, %r3856 };
            mov.b64 rb, { %r3728, %r3728 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3892, %r3893 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3857, %r3858 };
            mov.b64 rb, { %r3728, %r3728 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3898, %r3899 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3859, %r3860 };
            mov.b64 rb, { %r3728, %r3728 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3904, %r3905 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3861, %r3862 };
            mov.b64 rb, { %r3728, %r3728 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3910, %r3911 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3863, %r3864 };
            mov.b64 rb, { %r3728, %r3728 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3916, %r3917 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3865, %r3866 };
            mov.b64 rb, { %r3728, %r3728 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3922, %r3923 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3867, %r3868 };
            mov.b64 rb, { %r3728, %r3728 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3928, %r3929 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3869, %r3870 };
            mov.b64 rb, { %r3728, %r3728 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3934, %r3935 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3871, %r3872 };
            mov.b64 rb, { %r3728, %r3728 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3940, %r3941 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3873, %r3874 };
            mov.b64 rb, { %r3728, %r3728 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3946, %r3947 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3875, %r3876 };
            mov.b64 rb, { %r3728, %r3728 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3952, %r3953 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3877, %r3878 };
            mov.b64 rb, { %r3728, %r3728 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3958, %r3959 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3879, %r3880 };
            mov.b64 rb, { %r3728, %r3728 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3964, %r3965 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3881, %r3882 };
            mov.b64 rb, { %r3728, %r3728 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3970, %r3971 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r3883, %r3884 };
            mov.b64 rb, { %r3728, %r3728 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r3976, %r3977 }, rc;
        }
        
	// end inline asm
	.loc	1 734 20                        // 01-attention-forward.py:734:20 @[ 01-attention-forward.py:809:103 ]
	// begin inline asm
	@%p226 tcgen05.st.sync.aligned.32x32b.x32.b32 [%r3885 + 0], {%r3886, %r3887, %r3892, %r3893, %r3898, %r3899, %r3904, %r3905, %r3910, %r3911, %r3916, %r3917, %r3922, %r3923, %r3928, %r3929, %r3934, %r3935, %r3940, %r3941, %r3946, %r3947, %r3952, %r3953, %r3958, %r3959, %r3964, %r3965, %r3970, %r3971, %r3976, %r3977};
	// end inline asm
	// begin inline asm
	tcgen05.wait::st.sync.aligned;
	// end inline asm
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	.loc	1 735 20                        // 01-attention-forward.py:735:20 @[ 01-attention-forward.py:809:103 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.arrive.shared::cta.b64 _, [%r3291];
	// end inline asm
$L__tmp22:
	.loc	1 145 40                        // 01-attention-forward.py:145:40 @[ 01-attention-forward.py:0 ]
	xor.b32 	%r4927, %r4925, 1;
	xor.b32 	%r4928, %r4924, 1;
$L__tmp23:
	.loc	1 807 23                        // 01-attention-forward.py:807:23
	add.s32 	%r4920, %r4920, -1;
	setp.ne.s32 	%p238, %r4920, 0;
	@%p238 bra 	$L__BB0_42;
$L__BB0_43:                             // %._crit_edge901
                                        //   in Loop: Header=BB0_40 Depth=1
$L__tmp24:
	.loc	1 0 0                           // 01-attention-forward.py:0 @[ 01-attention-forward.py:0 ]
	add.s32 	%r163, %r3345, %r3348;
	div.s32 	%r164, %r3350, %r3347;
$L__tmp25:
	.loc	1 167 29                        // 01-attention-forward.py:167:29 @[ 01-attention-forward.py:812:68 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	
{
	@!%p239 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r3305], %r4928;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
	.loc	1 745 24                        // 01-attention-forward.py:745:24 @[ 01-attention-forward.py:812:68 ]
	shfl.sync.idx.b32 	%r4362, %r2, 0, 31, -1;
	shr.u32 	%r180, %r4362, 2;
	shl.b32 	%r4363, %r4362, 21;
	and.b32 	%r181, %r4363, 6291456;
	add.s32 	%r4364, %r145, %r180;
	add.s32 	%r4029, %r4364, %r181;
	// begin inline asm
	tcgen05.ld.sync.aligned.32x32b.x1.b32 {%r4028}, [%r4029 + 0];
	// end inline asm
	// begin inline asm
	tcgen05.wait::ld.sync.aligned;
	// end inline asm
	.loc	1 747 24                        // 01-attention-forward.py:747:24 @[ 01-attention-forward.py:812:68 ]
	add.s32 	%r4365, %r146, %r180;
	add.s32 	%r4031, %r4365, %r181;
	// begin inline asm
	tcgen05.ld.sync.aligned.32x32b.x1.b32 {%r4030}, [%r4031 + 0];
	// end inline asm
	// begin inline asm
	tcgen05.wait::ld.sync.aligned;
	// end inline asm
	.loc	1 749 20                        // 01-attention-forward.py:749:20 @[ 01-attention-forward.py:812:68 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.arrive.shared::cta.b64 _, [%r3306];
	// end inline asm
	.loc	1 158 29                        // 01-attention-forward.py:158:29 @[ 01-attention-forward.py:812:68 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	
{
	@!%p239 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r3294], %r4915;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
	.loc	1 167 29                        // 01-attention-forward.py:167:29 @[ 01-attention-forward.py:812:68 ]
	// begin inline asm
	
{
	@!%p239 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r3287], %r4926;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
	mov.b32 	%r4366, 0f3F800000;
	.loc	1 763 16                        // 01-attention-forward.py:763:16 @[ 01-attention-forward.py:812:68 ]
	div.full.f32 	%r4108, %r4366, %r4030;
	.loc	1 766 23                        // 01-attention-forward.py:766:23 @[ 01-attention-forward.py:812:68 ]
	shl.b32 	%r183, %r180, 6;
	add.s32 	%r4367, %r181, %r4849;
	add.s32 	%r4069, %r4367, %r183;
	// begin inline asm
	tcgen05.ld.sync.aligned.32x32b.x32.b32 {%r4037, %r4038, %r4039, %r4040, %r4041, %r4042, %r4043, %r4044, %r4045, %r4046, %r4047, %r4048, %r4049, %r4050, %r4051, %r4052, %r4053, %r4054, %r4055, %r4056, %r4057, %r4058, %r4059, %r4060, %r4061, %r4062, %r4063, %r4064, %r4065, %r4066, %r4067, %r4068}, [%r4069 + 0];
	// end inline asm
	// begin inline asm
	tcgen05.ld.sync.aligned.32x32b.x32.b32 {%r4070, %r4071, %r4072, %r4073, %r4074, %r4075, %r4076, %r4077, %r4078, %r4079, %r4080, %r4081, %r4082, %r4083, %r4084, %r4085, %r4086, %r4087, %r4088, %r4089, %r4090, %r4091, %r4092, %r4093, %r4094, %r4095, %r4096, %r4097, %r4098, %r4099, %r4100, %r4101}, [%r4069 + 32];
	// end inline asm
	// begin inline asm
	tcgen05.wait::ld.sync.aligned;
	// end inline asm
	.loc	1 464 8                         // 01-attention-forward.py:464:8 @[ 01-attention-forward.py:812:68 ]
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4037, %r4038 };
            mov.b64 rb, { %r4108, %r4108 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4103, %r4104 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4039, %r4040 };
            mov.b64 rb, { %r4108, %r4108 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4109, %r4110 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4041, %r4042 };
            mov.b64 rb, { %r4108, %r4108 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4115, %r4116 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4043, %r4044 };
            mov.b64 rb, { %r4108, %r4108 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4121, %r4122 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4045, %r4046 };
            mov.b64 rb, { %r4108, %r4108 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4127, %r4128 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4047, %r4048 };
            mov.b64 rb, { %r4108, %r4108 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4133, %r4134 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4049, %r4050 };
            mov.b64 rb, { %r4108, %r4108 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4139, %r4140 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4051, %r4052 };
            mov.b64 rb, { %r4108, %r4108 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4145, %r4146 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4053, %r4054 };
            mov.b64 rb, { %r4108, %r4108 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4151, %r4152 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4055, %r4056 };
            mov.b64 rb, { %r4108, %r4108 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4157, %r4158 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4057, %r4058 };
            mov.b64 rb, { %r4108, %r4108 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4163, %r4164 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4059, %r4060 };
            mov.b64 rb, { %r4108, %r4108 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4169, %r4170 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4061, %r4062 };
            mov.b64 rb, { %r4108, %r4108 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4175, %r4176 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4063, %r4064 };
            mov.b64 rb, { %r4108, %r4108 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4181, %r4182 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4065, %r4066 };
            mov.b64 rb, { %r4108, %r4108 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4187, %r4188 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4067, %r4068 };
            mov.b64 rb, { %r4108, %r4108 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4193, %r4194 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4070, %r4071 };
            mov.b64 rb, { %r4108, %r4108 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4199, %r4200 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4072, %r4073 };
            mov.b64 rb, { %r4108, %r4108 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4205, %r4206 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4074, %r4075 };
            mov.b64 rb, { %r4108, %r4108 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4211, %r4212 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4076, %r4077 };
            mov.b64 rb, { %r4108, %r4108 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4217, %r4218 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4078, %r4079 };
            mov.b64 rb, { %r4108, %r4108 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4223, %r4224 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4080, %r4081 };
            mov.b64 rb, { %r4108, %r4108 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4229, %r4230 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4082, %r4083 };
            mov.b64 rb, { %r4108, %r4108 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4235, %r4236 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4084, %r4085 };
            mov.b64 rb, { %r4108, %r4108 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4241, %r4242 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4086, %r4087 };
            mov.b64 rb, { %r4108, %r4108 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4247, %r4248 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4088, %r4089 };
            mov.b64 rb, { %r4108, %r4108 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4253, %r4254 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4090, %r4091 };
            mov.b64 rb, { %r4108, %r4108 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4259, %r4260 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4092, %r4093 };
            mov.b64 rb, { %r4108, %r4108 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4265, %r4266 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4094, %r4095 };
            mov.b64 rb, { %r4108, %r4108 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4271, %r4272 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4096, %r4097 };
            mov.b64 rb, { %r4108, %r4108 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4277, %r4278 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4098, %r4099 };
            mov.b64 rb, { %r4108, %r4108 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4283, %r4284 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4100, %r4101 };
            mov.b64 rb, { %r4108, %r4108 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4289, %r4290 }, rc;
        }
        
	// end inline asm
	.loc	1 768 61                        // 01-attention-forward.py:768:61 @[ 01-attention-forward.py:812:68 ]
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs129, %r4104, %r4103; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs130, %r4110, %r4109; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs131, %r4116, %r4115; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs132, %r4122, %r4121; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs133, %r4128, %r4127; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs134, %r4134, %r4133; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs135, %r4140, %r4139; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs136, %r4146, %r4145; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs137, %r4152, %r4151; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs138, %r4158, %r4157; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs139, %r4164, %r4163; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs140, %r4170, %r4169; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs141, %r4176, %r4175; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs142, %r4182, %r4181; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs143, %r4188, %r4187; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs144, %r4194, %r4193; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs145, %r4200, %r4199; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs146, %r4206, %r4205; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs147, %r4212, %r4211; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs148, %r4218, %r4217; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs149, %r4224, %r4223; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs150, %r4230, %r4229; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs151, %r4236, %r4235; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs152, %r4242, %r4241; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs153, %r4248, %r4247; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs154, %r4254, %r4253; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs155, %r4260, %r4259; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs156, %r4266, %r4265; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs157, %r4272, %r4271; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs158, %r4278, %r4277; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs159, %r4284, %r4283; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs160, %r4290, %r4289; 

	// end inline asm
	.loc	1 768 56                        // 01-attention-forward.py:768:56 @[ 01-attention-forward.py:812:68 ]
	mov.b32 	%r4368, {%rs129, %rs130};
	mov.b32 	%r4369, {%rs131, %rs132};
	mov.b32 	%r4370, {%rs133, %rs134};
	mov.b32 	%r4371, {%rs135, %rs136};
	st.shared.v4.b32 	[%r147], {%r4368, %r4369, %r4370, %r4371};
	mov.b32 	%r4372, {%rs137, %rs138};
	mov.b32 	%r4373, {%rs139, %rs140};
	mov.b32 	%r4374, {%rs141, %rs142};
	mov.b32 	%r4375, {%rs143, %rs144};
	st.shared.v4.b32 	[%r148], {%r4372, %r4373, %r4374, %r4375};
	mov.b32 	%r4376, {%rs145, %rs146};
	mov.b32 	%r4377, {%rs147, %rs148};
	mov.b32 	%r4378, {%rs149, %rs150};
	mov.b32 	%r4379, {%rs151, %rs152};
	st.shared.v4.b32 	[%r149], {%r4376, %r4377, %r4378, %r4379};
	mov.b32 	%r4380, {%rs153, %rs154};
	mov.b32 	%r4381, {%rs155, %rs156};
	mov.b32 	%r4382, {%rs157, %rs158};
	mov.b32 	%r4383, {%rs159, %rs160};
	st.shared.v4.b32 	[%r150], {%r4380, %r4381, %r4382, %r4383};
	.loc	1 770 4                         // 01-attention-forward.py:770:4 @[ 01-attention-forward.py:812:68 ]
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	.loc	1 771 20                        // 01-attention-forward.py:771:20 @[ 01-attention-forward.py:812:68 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.arrive.shared::cta.b64 _, [%r3293];
	// end inline asm
	.loc	1 772 20                        // 01-attention-forward.py:772:20 @[ 01-attention-forward.py:812:68 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.arrive.shared::cta.b64 _, [%r3288];
	// end inline asm
	.loc	1 774 19                        // 01-attention-forward.py:774:19 @[ 01-attention-forward.py:812:68 ]
	setp.lt.f32 	%p245, %r4030, 0f00800000;
	mul.f32 	%r4384, %r4030, 0f4B000000;
	selp.f32 	%r184, %r4384, %r4030, %p245;
	selp.f32 	%r4385, 0fC1B80000, 0f00000000, %p245;
	add.s32 	%r4386, %r184, -1060439283;
	and.b32 	%r4387, %r4386, -8388608;
	sub.s32 	%r4388, %r184, %r4387;
	cvt.rn.f32.s32 	%r4389, %r4387;
	mov.b32 	%r4390, 0f34000000;
	fma.rn.ftz.f32 	%r4391, %r4389, %r4390, %r4385;
	add.f32 	%r4392, %r4388, 0fBF800000;
	mov.b32 	%r4393, 0fBE2C7F30;
	mov.b32 	%r4394, 0f3DC6B27F;
	fma.rn.ftz.f32 	%r4395, %r4394, %r4392, %r4393;
	mov.b32 	%r4396, 0f3E2FCF2A;
	fma.rn.ftz.f32 	%r4397, %r4395, %r4392, %r4396;
	mov.b32 	%r4398, 0fBE374E43;
	fma.rn.ftz.f32 	%r4399, %r4397, %r4392, %r4398;
	mov.b32 	%r4400, 0f3E520BF4;
	fma.rn.ftz.f32 	%r4401, %r4399, %r4392, %r4400;
	mov.b32 	%r4402, 0fBE763C8B;
	fma.rn.ftz.f32 	%r4403, %r4401, %r4392, %r4402;
	mov.b32 	%r4404, 0f3E93BF99;
	fma.rn.ftz.f32 	%r4405, %r4403, %r4392, %r4404;
	mov.b32 	%r4406, 0fBEB8AA49;
	fma.rn.ftz.f32 	%r4407, %r4405, %r4392, %r4406;
	mov.b32 	%r4408, 0f3EF6384A;
	fma.rn.ftz.f32 	%r4409, %r4407, %r4392, %r4408;
	mov.b32 	%r4410, 0fBF38AA3B;
	fma.rn.ftz.f32 	%r4411, %r4409, %r4392, %r4410;
	mul.f32 	%r4412, %r4392, %r4411;
	mul.f32 	%r4413, %r4392, %r4412;
	mov.b32 	%r4414, 0f3FB8AA3B;
	fma.rn.ftz.f32 	%r4415, %r4392, %r4414, %r4413;
	add.f32 	%r4929, %r4391, %r4415;
	setp.lt.u32 	%p246, %r184, 2139095040;
	mov.b32 	%r4416, 0f7F800000;
	@%p246 bra 	$L__BB0_45;
// %bb.44:                              // %__nv_fmaf_rn.exit.i.i
                                        //   in Loop: Header=BB0_40 Depth=1
	.loc	1 0 19                          // 01-attention-forward.py:0:19
	fma.rn.ftz.f32 	%r4929, %r184, %r4416, %r4416;
$L__BB0_45:                             // %__nv_log2f.exit
                                        //   in Loop: Header=BB0_40 Depth=1
	.loc	1 774 19                        // 01-attention-forward.py:774:19 @[ 01-attention-forward.py:812:68 ]
	setp.eq.f32 	%p253, %r184, 0f00000000;
	selp.f32 	%r4753, 0fFF800000, %r4929, %p253;
	.loc	1 774 11                        // 01-attention-forward.py:774:11 @[ 01-attention-forward.py:812:68 ]
	add.f32 	%r4417, %r4753, %r4028;
	.loc	1 776 28                        // 01-attention-forward.py:776:28 @[ 01-attention-forward.py:812:68 ]
	shl.b32 	%r4754, %r164, 8;
	.loc	1 777 14                        // 01-attention-forward.py:777:14 @[ 01-attention-forward.py:812:68 ]
	or.b32 	%r4755, %r4754, %r4853;
	.loc	1 778 31                        // 01-attention-forward.py:778:31 @[ 01-attention-forward.py:812:68 ]
	mul.lo.s32 	%r4756, %r163, %r199;
	.loc	1 778 17                        // 01-attention-forward.py:778:17 @[ 01-attention-forward.py:812:68 ]
	mul.wide.s32 	%rd104, %r4756, 4;
	add.s64 	%rd105, %rd22, %rd104;
	.loc	1 778 46                        // 01-attention-forward.py:778:46 @[ 01-attention-forward.py:812:68 ]
	mul.wide.s32 	%rd106, %r4755, 4;
	add.s64 	%rd107, %rd105, %rd106;
	.loc	1 779 21                        // 01-attention-forward.py:779:21 @[ 01-attention-forward.py:812:68 ]
	// begin inline asm
	st.global.b32 [ %rd107 + 0 ], { %r4417 };
	// end inline asm
$L__tmp26:
	.loc	1 167 29                        // 01-attention-forward.py:167:29 @[ 01-attention-forward.py:814:68 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	mov.pred 	%p247, -1;
	// begin inline asm
	
{
	@!%p247 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r3308], %r4927;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
	.loc	1 745 24                        // 01-attention-forward.py:745:24 @[ 01-attention-forward.py:814:68 ]
	add.s32 	%r4758, %r151, %r180;
	add.s32 	%r4421, %r4758, %r181;
	// begin inline asm
	tcgen05.ld.sync.aligned.32x32b.x1.b32 {%r4420}, [%r4421 + 0];
	// end inline asm
	// begin inline asm
	tcgen05.wait::ld.sync.aligned;
	// end inline asm
	.loc	1 747 24                        // 01-attention-forward.py:747:24 @[ 01-attention-forward.py:814:68 ]
	add.s32 	%r4759, %r152, %r180;
	add.s32 	%r4423, %r4759, %r181;
	// begin inline asm
	tcgen05.ld.sync.aligned.32x32b.x1.b32 {%r4422}, [%r4423 + 0];
	// end inline asm
	// begin inline asm
	tcgen05.wait::ld.sync.aligned;
	// end inline asm
	.loc	1 749 20                        // 01-attention-forward.py:749:20 @[ 01-attention-forward.py:814:68 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.arrive.shared::cta.b64 _, [%r3309];
	// end inline asm
	.loc	1 158 29                        // 01-attention-forward.py:158:29 @[ 01-attention-forward.py:814:68 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	
{
	@!%p247 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r3297], %r4915;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
	.loc	1 167 29                        // 01-attention-forward.py:167:29 @[ 01-attention-forward.py:814:68 ]
	// begin inline asm
	
{
	@!%p247 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r3290], %r4926;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
	.loc	1 763 16                        // 01-attention-forward.py:763:16 @[ 01-attention-forward.py:814:68 ]
	div.full.f32 	%r4500, %r4366, %r4422;
	.loc	1 766 23                        // 01-attention-forward.py:766:23 @[ 01-attention-forward.py:814:68 ]
	add.s32 	%r4761, %r144, %r181;
	add.s32 	%r4461, %r4761, %r183;
	// begin inline asm
	tcgen05.ld.sync.aligned.32x32b.x32.b32 {%r4429, %r4430, %r4431, %r4432, %r4433, %r4434, %r4435, %r4436, %r4437, %r4438, %r4439, %r4440, %r4441, %r4442, %r4443, %r4444, %r4445, %r4446, %r4447, %r4448, %r4449, %r4450, %r4451, %r4452, %r4453, %r4454, %r4455, %r4456, %r4457, %r4458, %r4459, %r4460}, [%r4461 + 0];
	// end inline asm
	// begin inline asm
	tcgen05.ld.sync.aligned.32x32b.x32.b32 {%r4462, %r4463, %r4464, %r4465, %r4466, %r4467, %r4468, %r4469, %r4470, %r4471, %r4472, %r4473, %r4474, %r4475, %r4476, %r4477, %r4478, %r4479, %r4480, %r4481, %r4482, %r4483, %r4484, %r4485, %r4486, %r4487, %r4488, %r4489, %r4490, %r4491, %r4492, %r4493}, [%r4461 + 32];
	// end inline asm
	// begin inline asm
	tcgen05.wait::ld.sync.aligned;
	// end inline asm
	.loc	1 464 8                         // 01-attention-forward.py:464:8 @[ 01-attention-forward.py:814:68 ]
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4429, %r4430 };
            mov.b64 rb, { %r4500, %r4500 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4495, %r4496 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4431, %r4432 };
            mov.b64 rb, { %r4500, %r4500 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4501, %r4502 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4433, %r4434 };
            mov.b64 rb, { %r4500, %r4500 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4507, %r4508 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4435, %r4436 };
            mov.b64 rb, { %r4500, %r4500 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4513, %r4514 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4437, %r4438 };
            mov.b64 rb, { %r4500, %r4500 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4519, %r4520 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4439, %r4440 };
            mov.b64 rb, { %r4500, %r4500 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4525, %r4526 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4441, %r4442 };
            mov.b64 rb, { %r4500, %r4500 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4531, %r4532 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4443, %r4444 };
            mov.b64 rb, { %r4500, %r4500 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4537, %r4538 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4445, %r4446 };
            mov.b64 rb, { %r4500, %r4500 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4543, %r4544 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4447, %r4448 };
            mov.b64 rb, { %r4500, %r4500 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4549, %r4550 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4449, %r4450 };
            mov.b64 rb, { %r4500, %r4500 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4555, %r4556 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4451, %r4452 };
            mov.b64 rb, { %r4500, %r4500 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4561, %r4562 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4453, %r4454 };
            mov.b64 rb, { %r4500, %r4500 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4567, %r4568 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4455, %r4456 };
            mov.b64 rb, { %r4500, %r4500 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4573, %r4574 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4457, %r4458 };
            mov.b64 rb, { %r4500, %r4500 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4579, %r4580 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4459, %r4460 };
            mov.b64 rb, { %r4500, %r4500 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4585, %r4586 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4462, %r4463 };
            mov.b64 rb, { %r4500, %r4500 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4591, %r4592 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4464, %r4465 };
            mov.b64 rb, { %r4500, %r4500 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4597, %r4598 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4466, %r4467 };
            mov.b64 rb, { %r4500, %r4500 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4603, %r4604 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4468, %r4469 };
            mov.b64 rb, { %r4500, %r4500 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4609, %r4610 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4470, %r4471 };
            mov.b64 rb, { %r4500, %r4500 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4615, %r4616 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4472, %r4473 };
            mov.b64 rb, { %r4500, %r4500 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4621, %r4622 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4474, %r4475 };
            mov.b64 rb, { %r4500, %r4500 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4627, %r4628 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4476, %r4477 };
            mov.b64 rb, { %r4500, %r4500 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4633, %r4634 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4478, %r4479 };
            mov.b64 rb, { %r4500, %r4500 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4639, %r4640 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4480, %r4481 };
            mov.b64 rb, { %r4500, %r4500 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4645, %r4646 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4482, %r4483 };
            mov.b64 rb, { %r4500, %r4500 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4651, %r4652 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4484, %r4485 };
            mov.b64 rb, { %r4500, %r4500 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4657, %r4658 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4486, %r4487 };
            mov.b64 rb, { %r4500, %r4500 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4663, %r4664 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4488, %r4489 };
            mov.b64 rb, { %r4500, %r4500 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4669, %r4670 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4490, %r4491 };
            mov.b64 rb, { %r4500, %r4500 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4675, %r4676 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r4492, %r4493 };
            mov.b64 rb, { %r4500, %r4500 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r4681, %r4682 }, rc;
        }
        
	// end inline asm
	.loc	1 768 61                        // 01-attention-forward.py:768:61 @[ 01-attention-forward.py:814:68 ]
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs161, %r4496, %r4495; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs162, %r4502, %r4501; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs163, %r4508, %r4507; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs164, %r4514, %r4513; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs165, %r4520, %r4519; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs166, %r4526, %r4525; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs167, %r4532, %r4531; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs168, %r4538, %r4537; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs169, %r4544, %r4543; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs170, %r4550, %r4549; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs171, %r4556, %r4555; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs172, %r4562, %r4561; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs173, %r4568, %r4567; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs174, %r4574, %r4573; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs175, %r4580, %r4579; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs176, %r4586, %r4585; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs177, %r4592, %r4591; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs178, %r4598, %r4597; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs179, %r4604, %r4603; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs180, %r4610, %r4609; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs181, %r4616, %r4615; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs182, %r4622, %r4621; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs183, %r4628, %r4627; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs184, %r4634, %r4633; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs185, %r4640, %r4639; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs186, %r4646, %r4645; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs187, %r4652, %r4651; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs188, %r4658, %r4657; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs189, %r4664, %r4663; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs190, %r4670, %r4669; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs191, %r4676, %r4675; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs192, %r4682, %r4681; 

	// end inline asm
	.loc	1 768 56                        // 01-attention-forward.py:768:56 @[ 01-attention-forward.py:814:68 ]
	mov.b32 	%r4762, {%rs161, %rs162};
	mov.b32 	%r4763, {%rs163, %rs164};
	mov.b32 	%r4764, {%rs165, %rs166};
	mov.b32 	%r4765, {%rs167, %rs168};
	st.shared.v4.b32 	[%r153], {%r4762, %r4763, %r4764, %r4765};
	mov.b32 	%r4766, {%rs169, %rs170};
	mov.b32 	%r4767, {%rs171, %rs172};
	mov.b32 	%r4768, {%rs173, %rs174};
	mov.b32 	%r4769, {%rs175, %rs176};
	st.shared.v4.b32 	[%r154], {%r4766, %r4767, %r4768, %r4769};
	mov.b32 	%r4770, {%rs177, %rs178};
	mov.b32 	%r4771, {%rs179, %rs180};
	mov.b32 	%r4772, {%rs181, %rs182};
	mov.b32 	%r4773, {%rs183, %rs184};
	st.shared.v4.b32 	[%r155], {%r4770, %r4771, %r4772, %r4773};
	mov.b32 	%r4774, {%rs185, %rs186};
	mov.b32 	%r4775, {%rs187, %rs188};
	mov.b32 	%r4776, {%rs189, %rs190};
	mov.b32 	%r4777, {%rs191, %rs192};
	st.shared.v4.b32 	[%r156], {%r4774, %r4775, %r4776, %r4777};
	.loc	1 770 4                         // 01-attention-forward.py:770:4 @[ 01-attention-forward.py:814:68 ]
	// begin inline asm
	fence.proxy.async.shared::cta;
	// end inline asm
	.loc	1 771 20                        // 01-attention-forward.py:771:20 @[ 01-attention-forward.py:814:68 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.arrive.shared::cta.b64 _, [%r3296];
	// end inline asm
	.loc	1 772 20                        // 01-attention-forward.py:772:20 @[ 01-attention-forward.py:814:68 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.arrive.shared::cta.b64 _, [%r3291];
	// end inline asm
	.loc	1 774 19                        // 01-attention-forward.py:774:19 @[ 01-attention-forward.py:814:68 ]
	setp.lt.f32 	%p254, %r4422, 0f00800000;
	mul.f32 	%r4778, %r4422, 0f4B000000;
	selp.f32 	%r191, %r4778, %r4422, %p254;
	selp.f32 	%r4779, 0fC1B80000, 0f00000000, %p254;
	add.s32 	%r4780, %r191, -1060439283;
	and.b32 	%r4781, %r4780, -8388608;
	sub.s32 	%r4782, %r191, %r4781;
	cvt.rn.f32.s32 	%r4783, %r4781;
	fma.rn.ftz.f32 	%r4785, %r4783, %r4390, %r4779;
	add.f32 	%r4786, %r4782, 0fBF800000;
	fma.rn.ftz.f32 	%r4789, %r4394, %r4786, %r4393;
	fma.rn.ftz.f32 	%r4791, %r4789, %r4786, %r4396;
	fma.rn.ftz.f32 	%r4793, %r4791, %r4786, %r4398;
	fma.rn.ftz.f32 	%r4795, %r4793, %r4786, %r4400;
	fma.rn.ftz.f32 	%r4797, %r4795, %r4786, %r4402;
	fma.rn.ftz.f32 	%r4799, %r4797, %r4786, %r4404;
	fma.rn.ftz.f32 	%r4801, %r4799, %r4786, %r4406;
	fma.rn.ftz.f32 	%r4803, %r4801, %r4786, %r4408;
	fma.rn.ftz.f32 	%r4805, %r4803, %r4786, %r4410;
	mul.f32 	%r4806, %r4786, %r4805;
	mul.f32 	%r4807, %r4786, %r4806;
	fma.rn.ftz.f32 	%r4809, %r4786, %r4414, %r4807;
	add.f32 	%r4930, %r4785, %r4809;
	setp.lt.u32 	%p255, %r191, 2139095040;
	@%p255 bra 	$L__BB0_47;
$L__tmp27:
// %bb.46:                              // %__nv_fmaf_rn.exit.i.i820
                                        //   in Loop: Header=BB0_40 Depth=1
	.loc	1 0 19                          // 01-attention-forward.py:0:19
	fma.rn.ftz.f32 	%r4930, %r191, %r4416, %r4416;
	bra.uni 	$L__BB0_47;
$L__BB0_1:                              // %.preheader827.preheader
	ld.param.b32 	%r196, [gluon_attention_param_0];
	mov.u32 	%r4854, %ctaid.x;
	setp.lt.s32 	%p148, %r199, 1;
	bra.uni 	$L__BB0_2;
$L__BB0_36:                             // %._crit_edge
                                        //   in Loop: Header=BB0_2 Depth=1
	// begin inline asm
	barrier.sync 1 ;
	// end inline asm
	setmaxnreg.inc.sync.aligned.u32 	80;
$L__BB0_2:                              // %.preheader827
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_35 Depth 2
                                        //     Child Loop BB0_28 Depth 2
                                        //       Child Loop BB0_30 Depth 3
                                        //     Child Loop BB0_21 Depth 2
                                        //       Child Loop BB0_23 Depth 3
                                        //     Child Loop BB0_14 Depth 2
                                        //       Child Loop BB0_16 Depth 3
                                        //     Child Loop BB0_7 Depth 2
                                        //       Child Loop BB0_9 Depth 3
	.loc	1 826 0                         // 01-attention-forward.py:826
	setmaxnreg.dec.sync.aligned.u32 	80;
	// begin inline asm
	barrier.sync 1 ;
	// end inline asm
	add.s32 	%r202, %r4852, %r3;
	ld.shared.b8 	%r200, [%r202+98924];
	setp.gt.u32 	%p3, %r200, 6;
	@%p3 bra 	$L__BB0_4;
// %bb.3:                               // %.preheader827
                                        //   in Loop: Header=BB0_2 Depth=1
	$L_brx_0: .branchtargets
		$L__BB0_5,
		$L__BB0_12,
		$L__BB0_19,
		$L__BB0_26,
		$L__BB0_33,
		$L__BB0_37,
		$L__BB0_49;
	brx.idx 	%r200, $L_brx_0;
$L__BB0_5:                              //   in Loop: Header=BB0_2 Depth=1
	.loc	1 0 0                           // 01-attention-forward.py:0:0
	setmaxnreg.inc.sync.aligned.u32 	192;
	// begin inline asm
	barrier.sync 1 ;
	// end inline asm
$L__tmp28:
	.loc	1 158 29                        // 01-attention-forward.py:158:29 @[ 01-attention-forward.py:688:56 ]
	add.s32 	%r1889, %r4852, 99024;
	mov.b32 	%r4866, 0;
	mov.pred 	%p146, -1;
	// begin inline asm
	
{
	@!%p146 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r1889], %r4866;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
	.loc	1 370 30                        // 01-attention-forward.py:370:30 @[ 01-attention-forward.py:688:56 ]
	mov.u32 	%r4860, %ctaid.x;
	.loc	2 40 28                         // standard.py:40:28 @[ 01-attention-forward.py:688:56 ]
	shr.s32 	%r1893, %r4855, 31;
	shr.u32 	%r1894, %r1893, 24;
	add.s32 	%r1895, %r4855, %r1894;
	shr.s32 	%r1896, %r1895, 8;
	.loc	1 374 28                        // 01-attention-forward.py:374:28 @[ 01-attention-forward.py:688:56 ]
	mul.lo.s32 	%r7, %r4856, %r1896;
	.loc	1 655 63                        // 01-attention-forward.py:655:63 @[ 01-attention-forward.py:688:56 ]
	setp.ge.s32 	%p147, %r4860, %r7;
	@%p147 bra 	$L__BB0_11;
// %bb.6:                               // %.preheader.lr.ph
                                        //   in Loop: Header=BB0_2 Depth=1
	.loc	1 0 63                          // 01-attention-forward.py:0:63
	ld.shared.b32 	%r4, [global_smem+98312];
	mul.f32 	%r2045, %r196, 0f3FB8AA3B;
	add.s32 	%r1900, %r1, -128;
	shr.u32 	%r8, %r1900, 5;
	.loc	1 655 63                        // 01-attention-forward.py:655:63 @[ 01-attention-forward.py:688:56 ]
	add.s32 	%r10, %r4, 65;
	add.s32 	%r11, %r4, 66;
	mov.b32 	%r4867, 1;
	setp.eq.s32 	%p160, %r4853, 0;
	bra.uni 	$L__BB0_7;
$L__BB0_10:                             // %._crit_edge885
                                        //   in Loop: Header=BB0_7 Depth=2
	.loc	1 167 29                        // 01-attention-forward.py:167:29 @[ 01-attention-forward.py:688:56 ]
	// begin inline asm
	barrier.sync.aligned 2, 128 ;
	// end inline asm
	add.s32 	%r3239, %r4852, 98944;
	mov.pred 	%p157, -1;
	// begin inline asm
	
{
	@!%p157 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r3239], %r4866;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
	.loc	1 145 40                        // 01-attention-forward.py:145:40 @[ 01-attention-forward.py:688:56 ]
	xor.b32 	%r4866, %r4866, 1;
	.loc	1 675 23                        // 01-attention-forward.py:675:23 @[ 01-attention-forward.py:688:56 ]
	shfl.sync.idx.b32 	%r3250, %r8, 0, 31, -1;
	shr.u32 	%r3251, %r3250, 2;
	shl.b32 	%r3252, %r3250, 21;
	and.b32 	%r3253, %r3252, 6291456;
	add.s32 	%r3254, %r3251, %r10;
	add.s32 	%r3241, %r3254, %r3253;
	// begin inline asm
	@%p157 tcgen05.st.sync.aligned.32x32b.x1.b32 [%r3241 + 0], {%r4868};
	// end inline asm
	// begin inline asm
	tcgen05.wait::st.sync.aligned;
	// end inline asm
	// begin inline asm
	barrier.sync.aligned 2, 128 ;
	// end inline asm
	add.s32 	%r3255, %r3251, %r11;
	.loc	1 676 23                        // 01-attention-forward.py:676:23 @[ 01-attention-forward.py:688:56 ]
	add.s32 	%r3243, %r3255, %r3253;
	// begin inline asm
	@%p157 tcgen05.st.sync.aligned.32x32b.x1.b32 [%r3243 + 0], {%r4869};
	// end inline asm
	// begin inline asm
	tcgen05.wait::st.sync.aligned;
	// end inline asm
	// begin inline asm
	barrier.sync.aligned 2, 128 ;
	// end inline asm
	.loc	1 678 24                        // 01-attention-forward.py:678:24 @[ 01-attention-forward.py:688:56 ]
	// begin inline asm
	barrier.sync.aligned 2, 128 ;
	// end inline asm
	add.s32 	%r3245, %r4852, 99008;
	// begin inline asm
	@%p160 mbarrier.arrive.shared::cta.b64 _, [%r3245];
	// end inline asm
	.loc	1 158 29                        // 01-attention-forward.py:158:29 @[ 01-attention-forward.py:688:56 ]
	// begin inline asm
	barrier.sync.aligned 2, 128 ;
	// end inline asm
	// begin inline asm
	
{
	@!%p157 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r1889], %r4867;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
	.loc	1 145 40                        // 01-attention-forward.py:145:40 @[ 01-attention-forward.py:688:56 ]
	xor.b32 	%r4867, %r4867, 1;
	.loc	1 681 24                        // 01-attention-forward.py:681:24 @[ 01-attention-forward.py:688:56 ]
	// begin inline asm
	barrier.sync.aligned 2, 128 ;
	// end inline asm
	add.s32 	%r3248, %r4852, 98960;
	// begin inline asm
	@%p160 mbarrier.arrive.shared::cta.b64 _, [%r3248];
	// end inline asm
	.loc	1 655 63                        // 01-attention-forward.py:655:63 @[ 01-attention-forward.py:688:56 ]
	add.s32 	%r4860, %r4860, 78;
	setp.lt.s32 	%p163, %r4860, %r7;
	@%p163 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_11;
$L__BB0_7:                              // %.preheader
                                        //   Parent Loop BB0_2 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_9 Depth 3
	.loc	1 0 63                          // 01-attention-forward.py:0:63
	mov.b32 	%r4869, 0f3F800000;
	mov.b32 	%r4868, 0fFF800000;
	.loc	1 603 33                        // 01-attention-forward.py:603:33 @[ 01-attention-forward.py:688:56 ]
	@%p148 bra 	$L__BB0_10;
// %bb.8:                               // %.lr.ph884.preheader
                                        //   in Loop: Header=BB0_7 Depth=2
	.loc	1 0 33                          // 01-attention-forward.py:0:33
	mov.b32 	%r4865, 0;
	mov.b32 	%r4862, 0fFF800000;
	mov.b32 	%r4869, 0f3F800000;
$L__BB0_9:                              // %.lr.ph884
                                        //   Parent Loop BB0_2 Depth=1
                                        //     Parent Loop BB0_7 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	.loc	1 167 29                        // 01-attention-forward.py:167:29 @[ 01-attention-forward.py:688:56 ]
	// begin inline asm
	barrier.sync.aligned 2, 128 ;
	// end inline asm
	add.s32 	%r1906, %r4852, 98944;
	mov.pred 	%p149, -1;
	// begin inline asm
	
{
	@!%p149 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r1906], %r4866;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
	.loc	1 145 40                        // 01-attention-forward.py:145:40 @[ 01-attention-forward.py:688:56 ]
	xor.b32 	%r4866, %r4866, 1;
	.loc	1 605 25                        // 01-attention-forward.py:605:25 @[ 01-attention-forward.py:688:56 ]
	shfl.sync.idx.b32 	%r2975, %r8, 0, 31, -1;
	shr.u32 	%r2976, %r2975, 2;
	shl.b32 	%r2977, %r2975, 21;
	and.b32 	%r2978, %r2977, 6291456;
	shl.b32 	%r2979, %r2976, 7;
	add.s32 	%r2980, %r2978, %r4;
	add.s32 	%r1972, %r2980, %r2979;
	// begin inline asm
	tcgen05.ld.sync.aligned.32x32b.x64.b32 {%r2043, %r2044, %r2049, %r2050, %r2055, %r2056, %r2061, %r2062, %r2067, %r2068, %r2073, %r2074, %r2079, %r2080, %r2085, %r2086, %r2091, %r2092, %r2097, %r2098, %r2103, %r2104, %r2109, %r2110, %r2115, %r2116, %r2121, %r2122, %r2127, %r2128, %r2133, %r2134, %r2139, %r2140, %r2145, %r2146, %r2151, %r2152, %r2157, %r2158, %r2163, %r2164, %r2169, %r2170, %r2175, %r2176, %r2181, %r2182, %r2187, %r2188, %r2193, %r2194, %r2199, %r2200, %r2205, %r2206, %r2211, %r2212, %r2217, %r2218, %r2223, %r2224, %r2229, %r2230}, [%r1972 + 0];
	// end inline asm
	// begin inline asm
	tcgen05.ld.sync.aligned.32x32b.x64.b32 {%r2235, %r2236, %r2241, %r2242, %r2247, %r2248, %r2253, %r2254, %r2259, %r2260, %r2265, %r2266, %r2271, %r2272, %r2277, %r2278, %r2283, %r2284, %r2289, %r2290, %r2295, %r2296, %r2301, %r2302, %r2307, %r2308, %r2313, %r2314, %r2319, %r2320, %r2325, %r2326, %r2331, %r2332, %r2337, %r2338, %r2343, %r2344, %r2349, %r2350, %r2355, %r2356, %r2361, %r2362, %r2367, %r2368, %r2373, %r2374, %r2379, %r2380, %r2385, %r2386, %r2391, %r2392, %r2397, %r2398, %r2403, %r2404, %r2409, %r2410, %r2415, %r2416, %r2421, %r2422}, [%r1972 + 64];
	// end inline asm
	// begin inline asm
	tcgen05.wait::ld.sync.aligned;
	// end inline asm
	.loc	2 167 27                        // standard.py:167:27 @[ 01-attention-forward.py:688:56 ]
	max.f32 	%r2981, %r2043, %r2044;
	max.f32 	%r2982, %r2981, %r2049;
	max.f32 	%r2983, %r2982, %r2050;
	max.f32 	%r2984, %r2983, %r2055;
	max.f32 	%r2985, %r2984, %r2056;
	max.f32 	%r2986, %r2985, %r2061;
	max.f32 	%r2987, %r2986, %r2062;
	max.f32 	%r2988, %r2987, %r2067;
	max.f32 	%r2989, %r2988, %r2068;
	max.f32 	%r2990, %r2989, %r2073;
	max.f32 	%r2991, %r2990, %r2074;
	max.f32 	%r2992, %r2991, %r2079;
	max.f32 	%r2993, %r2992, %r2080;
	max.f32 	%r2994, %r2993, %r2085;
	max.f32 	%r2995, %r2994, %r2086;
	max.f32 	%r2996, %r2995, %r2091;
	max.f32 	%r2997, %r2996, %r2092;
	max.f32 	%r2998, %r2997, %r2097;
	max.f32 	%r2999, %r2998, %r2098;
	max.f32 	%r3000, %r2999, %r2103;
	max.f32 	%r3001, %r3000, %r2104;
	max.f32 	%r3002, %r3001, %r2109;
	max.f32 	%r3003, %r3002, %r2110;
	max.f32 	%r3004, %r3003, %r2115;
	max.f32 	%r3005, %r3004, %r2116;
	max.f32 	%r3006, %r3005, %r2121;
	max.f32 	%r3007, %r3006, %r2122;
	max.f32 	%r3008, %r3007, %r2127;
	max.f32 	%r3009, %r3008, %r2128;
	max.f32 	%r3010, %r3009, %r2133;
	max.f32 	%r3011, %r3010, %r2134;
	max.f32 	%r3012, %r3011, %r2139;
	max.f32 	%r3013, %r3012, %r2140;
	max.f32 	%r3014, %r3013, %r2145;
	max.f32 	%r3015, %r3014, %r2146;
	max.f32 	%r3016, %r3015, %r2151;
	max.f32 	%r3017, %r3016, %r2152;
	max.f32 	%r3018, %r3017, %r2157;
	max.f32 	%r3019, %r3018, %r2158;
	max.f32 	%r3020, %r3019, %r2163;
	max.f32 	%r3021, %r3020, %r2164;
	max.f32 	%r3022, %r3021, %r2169;
	max.f32 	%r3023, %r3022, %r2170;
	max.f32 	%r3024, %r3023, %r2175;
	max.f32 	%r3025, %r3024, %r2176;
	max.f32 	%r3026, %r3025, %r2181;
	max.f32 	%r3027, %r3026, %r2182;
	max.f32 	%r3028, %r3027, %r2187;
	max.f32 	%r3029, %r3028, %r2188;
	max.f32 	%r3030, %r3029, %r2193;
	max.f32 	%r3031, %r3030, %r2194;
	max.f32 	%r3032, %r3031, %r2199;
	max.f32 	%r3033, %r3032, %r2200;
	max.f32 	%r3034, %r3033, %r2205;
	max.f32 	%r3035, %r3034, %r2206;
	max.f32 	%r3036, %r3035, %r2211;
	max.f32 	%r3037, %r3036, %r2212;
	max.f32 	%r3038, %r3037, %r2217;
	max.f32 	%r3039, %r3038, %r2218;
	max.f32 	%r3040, %r3039, %r2223;
	max.f32 	%r3041, %r3040, %r2224;
	max.f32 	%r3042, %r3041, %r2229;
	max.f32 	%r3043, %r3042, %r2230;
	max.f32 	%r3044, %r3043, %r2235;
	max.f32 	%r3045, %r3044, %r2236;
	max.f32 	%r3046, %r3045, %r2241;
	max.f32 	%r3047, %r3046, %r2242;
	max.f32 	%r3048, %r3047, %r2247;
	max.f32 	%r3049, %r3048, %r2248;
	max.f32 	%r3050, %r3049, %r2253;
	max.f32 	%r3051, %r3050, %r2254;
	max.f32 	%r3052, %r3051, %r2259;
	max.f32 	%r3053, %r3052, %r2260;
	max.f32 	%r3054, %r3053, %r2265;
	max.f32 	%r3055, %r3054, %r2266;
	max.f32 	%r3056, %r3055, %r2271;
	max.f32 	%r3057, %r3056, %r2272;
	max.f32 	%r3058, %r3057, %r2277;
	max.f32 	%r3059, %r3058, %r2278;
	max.f32 	%r3060, %r3059, %r2283;
	max.f32 	%r3061, %r3060, %r2284;
	max.f32 	%r3062, %r3061, %r2289;
	max.f32 	%r3063, %r3062, %r2290;
	max.f32 	%r3064, %r3063, %r2295;
	max.f32 	%r3065, %r3064, %r2296;
	max.f32 	%r3066, %r3065, %r2301;
	max.f32 	%r3067, %r3066, %r2302;
	max.f32 	%r3068, %r3067, %r2307;
	max.f32 	%r3069, %r3068, %r2308;
	max.f32 	%r3070, %r3069, %r2313;
	max.f32 	%r3071, %r3070, %r2314;
	max.f32 	%r3072, %r3071, %r2319;
	max.f32 	%r3073, %r3072, %r2320;
	max.f32 	%r3074, %r3073, %r2325;
	max.f32 	%r3075, %r3074, %r2326;
	max.f32 	%r3076, %r3075, %r2331;
	max.f32 	%r3077, %r3076, %r2332;
	max.f32 	%r3078, %r3077, %r2337;
	max.f32 	%r3079, %r3078, %r2338;
	max.f32 	%r3080, %r3079, %r2343;
	max.f32 	%r3081, %r3080, %r2344;
	max.f32 	%r3082, %r3081, %r2349;
	max.f32 	%r3083, %r3082, %r2350;
	max.f32 	%r3084, %r3083, %r2355;
	max.f32 	%r3085, %r3084, %r2356;
	max.f32 	%r3086, %r3085, %r2361;
	max.f32 	%r3087, %r3086, %r2362;
	max.f32 	%r3088, %r3087, %r2367;
	max.f32 	%r3089, %r3088, %r2368;
	max.f32 	%r3090, %r3089, %r2373;
	max.f32 	%r3091, %r3090, %r2374;
	max.f32 	%r3092, %r3091, %r2379;
	max.f32 	%r3093, %r3092, %r2380;
	max.f32 	%r3094, %r3093, %r2385;
	max.f32 	%r3095, %r3094, %r2386;
	max.f32 	%r3096, %r3095, %r2391;
	max.f32 	%r3097, %r3096, %r2392;
	max.f32 	%r3098, %r3097, %r2397;
	max.f32 	%r3099, %r3098, %r2398;
	max.f32 	%r3100, %r3099, %r2403;
	max.f32 	%r3101, %r3100, %r2404;
	max.f32 	%r3102, %r3101, %r2409;
	max.f32 	%r3103, %r3102, %r2410;
	max.f32 	%r3104, %r3103, %r2415;
	max.f32 	%r3105, %r3104, %r2416;
	max.f32 	%r3106, %r3105, %r2421;
	max.f32 	%r3107, %r3106, %r2422;
	.loc	1 613 47                        // 01-attention-forward.py:613:47 @[ 01-attention-forward.py:688:56 ]
	mul.f32 	%r3108, %r2045, %r3107;
	.loc	1 613 31                        // 01-attention-forward.py:613:31 @[ 01-attention-forward.py:688:56 ]
	max.f32 	%r4868, %r4862, %r3108;
	.loc	1 614 30                        // 01-attention-forward.py:614:30 @[ 01-attention-forward.py:688:56 ]
	sub.f32 	%r3109, %r4862, %r4868;
	.loc	1 614 24                        // 01-attention-forward.py:614:24 @[ 01-attention-forward.py:688:56 ]
	ex2.approx.ftz.f32 	%r2039, %r3109;
	add.s32 	%r3110, %r2980, %r2976;
	.loc	1 617 25                        // 01-attention-forward.py:617:25 @[ 01-attention-forward.py:688:56 ]
	add.s32 	%r2038, %r3110, 64;
	// begin inline asm
	@%p149 tcgen05.st.sync.aligned.32x32b.x1.b32 [%r2038 + 0], {%r2039};
	// end inline asm
	// begin inline asm
	tcgen05.wait::st.sync.aligned;
	// end inline asm
	// begin inline asm
	barrier.sync.aligned 2, 128 ;
	// end inline asm
	.loc	1 618 24                        // 01-attention-forward.py:618:24 @[ 01-attention-forward.py:688:56 ]
	// begin inline asm
	barrier.sync.aligned 2, 128 ;
	// end inline asm
	add.s32 	%r2040, %r4852, 99008;
	// begin inline asm
	@%p160 mbarrier.arrive.shared::cta.b64 _, [%r2040];
	// end inline asm
	.loc	1 464 8                         // 01-attention-forward.py:464:8 @[ 01-attention-forward.py:688:56 ]
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2043, %r2044 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2041, %r2042 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2049, %r2050 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2047, %r2048 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2055, %r2056 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2053, %r2054 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2061, %r2062 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2059, %r2060 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2067, %r2068 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2065, %r2066 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2073, %r2074 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2071, %r2072 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2079, %r2080 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2077, %r2078 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2085, %r2086 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2083, %r2084 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2091, %r2092 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2089, %r2090 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2097, %r2098 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2095, %r2096 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2103, %r2104 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2101, %r2102 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2109, %r2110 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2107, %r2108 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2115, %r2116 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2113, %r2114 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2121, %r2122 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2119, %r2120 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2127, %r2128 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2125, %r2126 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2133, %r2134 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2131, %r2132 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2139, %r2140 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2137, %r2138 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2145, %r2146 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2143, %r2144 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2151, %r2152 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2149, %r2150 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2157, %r2158 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2155, %r2156 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2163, %r2164 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2161, %r2162 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2169, %r2170 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2167, %r2168 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2175, %r2176 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2173, %r2174 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2181, %r2182 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2179, %r2180 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2187, %r2188 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2185, %r2186 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2193, %r2194 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2191, %r2192 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2199, %r2200 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2197, %r2198 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2205, %r2206 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2203, %r2204 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2211, %r2212 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2209, %r2210 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2217, %r2218 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2215, %r2216 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2223, %r2224 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2221, %r2222 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2229, %r2230 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2227, %r2228 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2235, %r2236 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2233, %r2234 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2241, %r2242 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2239, %r2240 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2247, %r2248 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2245, %r2246 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2253, %r2254 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2251, %r2252 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2259, %r2260 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2257, %r2258 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2265, %r2266 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2263, %r2264 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2271, %r2272 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2269, %r2270 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2277, %r2278 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2275, %r2276 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2283, %r2284 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2281, %r2282 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2289, %r2290 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2287, %r2288 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2295, %r2296 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2293, %r2294 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2301, %r2302 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2299, %r2300 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2307, %r2308 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2305, %r2306 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2313, %r2314 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2311, %r2312 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2319, %r2320 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2317, %r2318 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2325, %r2326 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2323, %r2324 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2331, %r2332 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2329, %r2330 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2337, %r2338 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2335, %r2336 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2343, %r2344 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2341, %r2342 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2349, %r2350 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2347, %r2348 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2355, %r2356 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2353, %r2354 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2361, %r2362 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2359, %r2360 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2367, %r2368 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2365, %r2366 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2373, %r2374 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2371, %r2372 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2379, %r2380 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2377, %r2378 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2385, %r2386 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2383, %r2384 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2391, %r2392 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2389, %r2390 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2397, %r2398 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2395, %r2396 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2403, %r2404 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2401, %r2402 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2409, %r2410 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2407, %r2408 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2415, %r2416 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2413, %r2414 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2421, %r2422 };
            mov.b64 rb, { %r2045, %r2045 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r2419, %r2420 }, rc;
        }
        
	// end inline asm
	mov.b32 	%r3111, 0f00000000;
	.loc	1 621 29                        // 01-attention-forward.py:621:29 @[ 01-attention-forward.py:688:56 ]
	sub.f32 	%r2430, %r3111, %r4868;
	.loc	1 444 8                         // 01-attention-forward.py:444:8 @[ 01-attention-forward.py:688:56 ]
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2041, %r2042 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2425, %r2426 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2047, %r2048 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2431, %r2432 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2053, %r2054 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2437, %r2438 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2059, %r2060 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2443, %r2444 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2065, %r2066 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2449, %r2450 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2071, %r2072 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2455, %r2456 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2077, %r2078 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2461, %r2462 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2083, %r2084 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2467, %r2468 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2089, %r2090 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2473, %r2474 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2095, %r2096 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2479, %r2480 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2101, %r2102 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2485, %r2486 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2107, %r2108 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2491, %r2492 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2113, %r2114 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2497, %r2498 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2119, %r2120 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2503, %r2504 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2125, %r2126 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2509, %r2510 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2131, %r2132 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2515, %r2516 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2137, %r2138 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2521, %r2522 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2143, %r2144 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2527, %r2528 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2149, %r2150 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2533, %r2534 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2155, %r2156 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2539, %r2540 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2161, %r2162 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2545, %r2546 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2167, %r2168 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2551, %r2552 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2173, %r2174 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2557, %r2558 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2179, %r2180 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2563, %r2564 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2185, %r2186 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2569, %r2570 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2191, %r2192 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2575, %r2576 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2197, %r2198 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2581, %r2582 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2203, %r2204 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2587, %r2588 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2209, %r2210 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2593, %r2594 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2215, %r2216 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2599, %r2600 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2221, %r2222 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2605, %r2606 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2227, %r2228 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2611, %r2612 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2233, %r2234 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2617, %r2618 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2239, %r2240 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2623, %r2624 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2245, %r2246 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2629, %r2630 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2251, %r2252 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2635, %r2636 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2257, %r2258 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2641, %r2642 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2263, %r2264 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2647, %r2648 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2269, %r2270 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2653, %r2654 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2275, %r2276 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2659, %r2660 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2281, %r2282 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2665, %r2666 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2287, %r2288 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2671, %r2672 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2293, %r2294 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2677, %r2678 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2299, %r2300 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2683, %r2684 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2305, %r2306 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2689, %r2690 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2311, %r2312 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2695, %r2696 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2317, %r2318 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2701, %r2702 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2323, %r2324 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2707, %r2708 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2329, %r2330 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2713, %r2714 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2335, %r2336 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2719, %r2720 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2341, %r2342 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2725, %r2726 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2347, %r2348 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2731, %r2732 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2353, %r2354 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2737, %r2738 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2359, %r2360 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2743, %r2744 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2365, %r2366 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2749, %r2750 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2371, %r2372 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2755, %r2756 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2377, %r2378 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2761, %r2762 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2383, %r2384 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2767, %r2768 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2389, %r2390 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2773, %r2774 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2395, %r2396 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2779, %r2780 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2401, %r2402 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2785, %r2786 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2407, %r2408 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2791, %r2792 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2413, %r2414 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2797, %r2798 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r2419, %r2420 };
            mov.b64 rb, { %r2430, %r2430 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r2803, %r2804 }, rc;
        }
        
	// end inline asm
	.loc	1 625 21                        // 01-attention-forward.py:625:21 @[ 01-attention-forward.py:688:56 ]
	ex2.approx.ftz.f32 	%r2809, %r2425;
	ex2.approx.ftz.f32 	%r2810, %r2426;
	ex2.approx.ftz.f32 	%r2811, %r2431;
	ex2.approx.ftz.f32 	%r2812, %r2432;
	ex2.approx.ftz.f32 	%r2813, %r2437;
	ex2.approx.ftz.f32 	%r2814, %r2438;
	ex2.approx.ftz.f32 	%r2815, %r2443;
	ex2.approx.ftz.f32 	%r2816, %r2444;
	ex2.approx.ftz.f32 	%r2817, %r2449;
	ex2.approx.ftz.f32 	%r2818, %r2450;
	ex2.approx.ftz.f32 	%r2819, %r2455;
	ex2.approx.ftz.f32 	%r2820, %r2456;
	ex2.approx.ftz.f32 	%r2821, %r2461;
	ex2.approx.ftz.f32 	%r2822, %r2462;
	ex2.approx.ftz.f32 	%r2823, %r2467;
	ex2.approx.ftz.f32 	%r2824, %r2468;
	ex2.approx.ftz.f32 	%r2825, %r2473;
	ex2.approx.ftz.f32 	%r2826, %r2474;
	ex2.approx.ftz.f32 	%r2827, %r2479;
	ex2.approx.ftz.f32 	%r2828, %r2480;
	ex2.approx.ftz.f32 	%r2829, %r2485;
	ex2.approx.ftz.f32 	%r2830, %r2486;
	ex2.approx.ftz.f32 	%r2831, %r2491;
	ex2.approx.ftz.f32 	%r2832, %r2492;
	ex2.approx.ftz.f32 	%r2833, %r2497;
	ex2.approx.ftz.f32 	%r2834, %r2498;
	ex2.approx.ftz.f32 	%r2835, %r2503;
	ex2.approx.ftz.f32 	%r2836, %r2504;
	ex2.approx.ftz.f32 	%r2837, %r2509;
	ex2.approx.ftz.f32 	%r2838, %r2510;
	ex2.approx.ftz.f32 	%r2839, %r2515;
	ex2.approx.ftz.f32 	%r2840, %r2516;
	ex2.approx.ftz.f32 	%r2841, %r2521;
	ex2.approx.ftz.f32 	%r2842, %r2522;
	ex2.approx.ftz.f32 	%r2843, %r2527;
	ex2.approx.ftz.f32 	%r2844, %r2528;
	ex2.approx.ftz.f32 	%r2845, %r2533;
	ex2.approx.ftz.f32 	%r2846, %r2534;
	ex2.approx.ftz.f32 	%r2847, %r2539;
	ex2.approx.ftz.f32 	%r2848, %r2540;
	ex2.approx.ftz.f32 	%r2849, %r2545;
	ex2.approx.ftz.f32 	%r2850, %r2546;
	ex2.approx.ftz.f32 	%r2851, %r2551;
	ex2.approx.ftz.f32 	%r2852, %r2552;
	ex2.approx.ftz.f32 	%r2853, %r2557;
	ex2.approx.ftz.f32 	%r2854, %r2558;
	ex2.approx.ftz.f32 	%r2855, %r2563;
	ex2.approx.ftz.f32 	%r2856, %r2564;
	ex2.approx.ftz.f32 	%r2857, %r2569;
	ex2.approx.ftz.f32 	%r2858, %r2570;
	ex2.approx.ftz.f32 	%r2859, %r2575;
	ex2.approx.ftz.f32 	%r2860, %r2576;
	ex2.approx.ftz.f32 	%r2861, %r2581;
	ex2.approx.ftz.f32 	%r2862, %r2582;
	ex2.approx.ftz.f32 	%r2863, %r2587;
	ex2.approx.ftz.f32 	%r2864, %r2588;
	ex2.approx.ftz.f32 	%r2865, %r2593;
	ex2.approx.ftz.f32 	%r2866, %r2594;
	ex2.approx.ftz.f32 	%r2867, %r2599;
	ex2.approx.ftz.f32 	%r2868, %r2600;
	ex2.approx.ftz.f32 	%r2869, %r2605;
	ex2.approx.ftz.f32 	%r2870, %r2606;
	ex2.approx.ftz.f32 	%r2871, %r2611;
	ex2.approx.ftz.f32 	%r2872, %r2612;
	.loc	1 626 57                        // 01-attention-forward.py:626:57 @[ 01-attention-forward.py:688:56 ]
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs65, %r2810, %r2809; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs66, %r2812, %r2811; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs67, %r2814, %r2813; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs68, %r2816, %r2815; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs69, %r2818, %r2817; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs70, %r2820, %r2819; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs71, %r2822, %r2821; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs72, %r2824, %r2823; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs73, %r2826, %r2825; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs74, %r2828, %r2827; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs75, %r2830, %r2829; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs76, %r2832, %r2831; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs77, %r2834, %r2833; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs78, %r2836, %r2835; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs79, %r2838, %r2837; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs80, %r2840, %r2839; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs81, %r2842, %r2841; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs82, %r2844, %r2843; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs83, %r2846, %r2845; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs84, %r2848, %r2847; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs85, %r2850, %r2849; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs86, %r2852, %r2851; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs87, %r2854, %r2853; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs88, %r2856, %r2855; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs89, %r2858, %r2857; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs90, %r2860, %r2859; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs91, %r2862, %r2861; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs92, %r2864, %r2863; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs93, %r2866, %r2865; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs94, %r2868, %r2867; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs95, %r2870, %r2869; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs96, %r2872, %r2871; 

	// end inline asm
	.loc	1 626 51                        // 01-attention-forward.py:626:51 @[ 01-attention-forward.py:688:56 ]
	mov.b32 	%r2874, {%rs65, %rs66};
	mov.b32 	%r2875, {%rs67, %rs68};
	mov.b32 	%r2876, {%rs69, %rs70};
	mov.b32 	%r2877, {%rs71, %rs72};
	mov.b32 	%r2878, {%rs73, %rs74};
	mov.b32 	%r2879, {%rs75, %rs76};
	mov.b32 	%r2880, {%rs77, %rs78};
	mov.b32 	%r2881, {%rs79, %rs80};
	mov.b32 	%r2882, {%rs81, %rs82};
	mov.b32 	%r2883, {%rs83, %rs84};
	mov.b32 	%r2884, {%rs85, %rs86};
	mov.b32 	%r2885, {%rs87, %rs88};
	mov.b32 	%r2886, {%rs89, %rs90};
	mov.b32 	%r2887, {%rs91, %rs92};
	mov.b32 	%r2888, {%rs93, %rs94};
	mov.b32 	%r2889, {%rs95, %rs96};
	mad.lo.s32 	%r2873, %r2976, -112, %r1972;
	// begin inline asm
	@%p149 tcgen05.st.sync.aligned.32x32b.x16.b32 [%r2873 + 0], {%r2874, %r2875, %r2876, %r2877, %r2878, %r2879, %r2880, %r2881, %r2882, %r2883, %r2884, %r2885, %r2886, %r2887, %r2888, %r2889};
	// end inline asm
	// begin inline asm
	tcgen05.wait::st.sync.aligned;
	// end inline asm
	// begin inline asm
	barrier.sync.aligned 2, 128 ;
	// end inline asm
	.loc	1 627 21                        // 01-attention-forward.py:627:21 @[ 01-attention-forward.py:688:56 ]
	ex2.approx.ftz.f32 	%r2890, %r2617;
	ex2.approx.ftz.f32 	%r2891, %r2618;
	ex2.approx.ftz.f32 	%r2892, %r2623;
	ex2.approx.ftz.f32 	%r2893, %r2624;
	ex2.approx.ftz.f32 	%r2894, %r2629;
	ex2.approx.ftz.f32 	%r2895, %r2630;
	ex2.approx.ftz.f32 	%r2896, %r2635;
	ex2.approx.ftz.f32 	%r2897, %r2636;
	ex2.approx.ftz.f32 	%r2898, %r2641;
	ex2.approx.ftz.f32 	%r2899, %r2642;
	ex2.approx.ftz.f32 	%r2900, %r2647;
	ex2.approx.ftz.f32 	%r2901, %r2648;
	ex2.approx.ftz.f32 	%r2902, %r2653;
	ex2.approx.ftz.f32 	%r2903, %r2654;
	ex2.approx.ftz.f32 	%r2904, %r2659;
	ex2.approx.ftz.f32 	%r2905, %r2660;
	ex2.approx.ftz.f32 	%r2906, %r2665;
	ex2.approx.ftz.f32 	%r2907, %r2666;
	ex2.approx.ftz.f32 	%r2908, %r2671;
	ex2.approx.ftz.f32 	%r2909, %r2672;
	ex2.approx.ftz.f32 	%r2910, %r2677;
	ex2.approx.ftz.f32 	%r2911, %r2678;
	ex2.approx.ftz.f32 	%r2912, %r2683;
	ex2.approx.ftz.f32 	%r2913, %r2684;
	ex2.approx.ftz.f32 	%r2914, %r2689;
	ex2.approx.ftz.f32 	%r2915, %r2690;
	ex2.approx.ftz.f32 	%r2916, %r2695;
	ex2.approx.ftz.f32 	%r2917, %r2696;
	ex2.approx.ftz.f32 	%r2918, %r2701;
	ex2.approx.ftz.f32 	%r2919, %r2702;
	ex2.approx.ftz.f32 	%r2920, %r2707;
	ex2.approx.ftz.f32 	%r2921, %r2708;
	ex2.approx.ftz.f32 	%r2922, %r2713;
	ex2.approx.ftz.f32 	%r2923, %r2714;
	ex2.approx.ftz.f32 	%r2924, %r2719;
	ex2.approx.ftz.f32 	%r2925, %r2720;
	ex2.approx.ftz.f32 	%r2926, %r2725;
	ex2.approx.ftz.f32 	%r2927, %r2726;
	ex2.approx.ftz.f32 	%r2928, %r2731;
	ex2.approx.ftz.f32 	%r2929, %r2732;
	ex2.approx.ftz.f32 	%r2930, %r2737;
	ex2.approx.ftz.f32 	%r2931, %r2738;
	ex2.approx.ftz.f32 	%r2932, %r2743;
	ex2.approx.ftz.f32 	%r2933, %r2744;
	ex2.approx.ftz.f32 	%r2934, %r2749;
	ex2.approx.ftz.f32 	%r2935, %r2750;
	ex2.approx.ftz.f32 	%r2936, %r2755;
	ex2.approx.ftz.f32 	%r2937, %r2756;
	ex2.approx.ftz.f32 	%r2938, %r2761;
	ex2.approx.ftz.f32 	%r2939, %r2762;
	ex2.approx.ftz.f32 	%r2940, %r2767;
	ex2.approx.ftz.f32 	%r2941, %r2768;
	ex2.approx.ftz.f32 	%r2942, %r2773;
	ex2.approx.ftz.f32 	%r2943, %r2774;
	ex2.approx.ftz.f32 	%r2944, %r2779;
	ex2.approx.ftz.f32 	%r2945, %r2780;
	ex2.approx.ftz.f32 	%r2946, %r2785;
	ex2.approx.ftz.f32 	%r2947, %r2786;
	ex2.approx.ftz.f32 	%r2948, %r2791;
	ex2.approx.ftz.f32 	%r2949, %r2792;
	ex2.approx.ftz.f32 	%r2950, %r2797;
	ex2.approx.ftz.f32 	%r2951, %r2798;
	ex2.approx.ftz.f32 	%r2952, %r2803;
	ex2.approx.ftz.f32 	%r2953, %r2804;
	.loc	1 628 75                        // 01-attention-forward.py:628:75 @[ 01-attention-forward.py:688:56 ]
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs97, %r2891, %r2890; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs98, %r2893, %r2892; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs99, %r2895, %r2894; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs100, %r2897, %r2896; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs101, %r2899, %r2898; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs102, %r2901, %r2900; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs103, %r2903, %r2902; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs104, %r2905, %r2904; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs105, %r2907, %r2906; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs106, %r2909, %r2908; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs107, %r2911, %r2910; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs108, %r2913, %r2912; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs109, %r2915, %r2914; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs110, %r2917, %r2916; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs111, %r2919, %r2918; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs112, %r2921, %r2920; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs113, %r2923, %r2922; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs114, %r2925, %r2924; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs115, %r2927, %r2926; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs116, %r2929, %r2928; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs117, %r2931, %r2930; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs118, %r2933, %r2932; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs119, %r2935, %r2934; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs120, %r2937, %r2936; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs121, %r2939, %r2938; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs122, %r2941, %r2940; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs123, %r2943, %r2942; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs124, %r2945, %r2944; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs125, %r2947, %r2946; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs126, %r2949, %r2948; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs127, %r2951, %r2950; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs128, %r2953, %r2952; 

	// end inline asm
	.loc	1 628 69                        // 01-attention-forward.py:628:69 @[ 01-attention-forward.py:688:56 ]
	mov.b32 	%r2955, {%rs97, %rs98};
	mov.b32 	%r2956, {%rs99, %rs100};
	mov.b32 	%r2957, {%rs101, %rs102};
	mov.b32 	%r2958, {%rs103, %rs104};
	mov.b32 	%r2959, {%rs105, %rs106};
	mov.b32 	%r2960, {%rs107, %rs108};
	mov.b32 	%r2961, {%rs109, %rs110};
	mov.b32 	%r2962, {%rs111, %rs112};
	mov.b32 	%r2963, {%rs113, %rs114};
	mov.b32 	%r2964, {%rs115, %rs116};
	mov.b32 	%r2965, {%rs117, %rs118};
	mov.b32 	%r2966, {%rs119, %rs120};
	mov.b32 	%r2967, {%rs121, %rs122};
	mov.b32 	%r2968, {%rs123, %rs124};
	mov.b32 	%r2969, {%rs125, %rs126};
	mov.b32 	%r2970, {%rs127, %rs128};
	add.s32 	%r2954, %r2873, 16;
	// begin inline asm
	@%p149 tcgen05.st.sync.aligned.32x32b.x16.b32 [%r2954 + 0], {%r2955, %r2956, %r2957, %r2958, %r2959, %r2960, %r2961, %r2962, %r2963, %r2964, %r2965, %r2966, %r2967, %r2968, %r2969, %r2970};
	// end inline asm
	// begin inline asm
	tcgen05.wait::st.sync.aligned;
	// end inline asm
	// begin inline asm
	barrier.sync.aligned 2, 128 ;
	// end inline asm
	.loc	1 629 24                        // 01-attention-forward.py:629:24 @[ 01-attention-forward.py:688:56 ]
	// begin inline asm
	barrier.sync.aligned 2, 128 ;
	// end inline asm
	add.s32 	%r2971, %r4852, 98960;
	// begin inline asm
	@%p160 mbarrier.arrive.shared::cta.b64 _, [%r2971];
	// end inline asm
	.loc	1 158 29                        // 01-attention-forward.py:158:29 @[ 01-attention-forward.py:688:56 ]
	// begin inline asm
	barrier.sync.aligned 2, 128 ;
	// end inline asm
	// begin inline asm
	
{
	@!%p149 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r1889], %r4867;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
	.loc	1 145 40                        // 01-attention-forward.py:145:40 @[ 01-attention-forward.py:688:56 ]
	xor.b32 	%r4867, %r4867, 1;
	.loc	2 260 15                        // standard.py:260:15 @[ 01-attention-forward.py:688:56 ]
	add.f32 	%r3112, %r2809, %r2810;
	add.f32 	%r3113, %r3112, %r2811;
	add.f32 	%r3114, %r3113, %r2812;
	add.f32 	%r3115, %r3114, %r2813;
	add.f32 	%r3116, %r3115, %r2814;
	add.f32 	%r3117, %r3116, %r2815;
	add.f32 	%r3118, %r3117, %r2816;
	add.f32 	%r3119, %r3118, %r2817;
	add.f32 	%r3120, %r3119, %r2818;
	add.f32 	%r3121, %r3120, %r2819;
	add.f32 	%r3122, %r3121, %r2820;
	add.f32 	%r3123, %r3122, %r2821;
	add.f32 	%r3124, %r3123, %r2822;
	add.f32 	%r3125, %r3124, %r2823;
	add.f32 	%r3126, %r3125, %r2824;
	add.f32 	%r3127, %r3126, %r2825;
	add.f32 	%r3128, %r3127, %r2826;
	add.f32 	%r3129, %r3128, %r2827;
	add.f32 	%r3130, %r3129, %r2828;
	add.f32 	%r3131, %r3130, %r2829;
	add.f32 	%r3132, %r3131, %r2830;
	add.f32 	%r3133, %r3132, %r2831;
	add.f32 	%r3134, %r3133, %r2832;
	add.f32 	%r3135, %r3134, %r2833;
	add.f32 	%r3136, %r3135, %r2834;
	add.f32 	%r3137, %r3136, %r2835;
	add.f32 	%r3138, %r3137, %r2836;
	add.f32 	%r3139, %r3138, %r2837;
	add.f32 	%r3140, %r3139, %r2838;
	add.f32 	%r3141, %r3140, %r2839;
	add.f32 	%r3142, %r3141, %r2840;
	add.f32 	%r3143, %r3142, %r2841;
	add.f32 	%r3144, %r3143, %r2842;
	add.f32 	%r3145, %r3144, %r2843;
	add.f32 	%r3146, %r3145, %r2844;
	add.f32 	%r3147, %r3146, %r2845;
	add.f32 	%r3148, %r3147, %r2846;
	add.f32 	%r3149, %r3148, %r2847;
	add.f32 	%r3150, %r3149, %r2848;
	add.f32 	%r3151, %r3150, %r2849;
	add.f32 	%r3152, %r3151, %r2850;
	add.f32 	%r3153, %r3152, %r2851;
	add.f32 	%r3154, %r3153, %r2852;
	add.f32 	%r3155, %r3154, %r2853;
	add.f32 	%r3156, %r3155, %r2854;
	add.f32 	%r3157, %r3156, %r2855;
	add.f32 	%r3158, %r3157, %r2856;
	add.f32 	%r3159, %r3158, %r2857;
	add.f32 	%r3160, %r3159, %r2858;
	add.f32 	%r3161, %r3160, %r2859;
	add.f32 	%r3162, %r3161, %r2860;
	add.f32 	%r3163, %r3162, %r2861;
	add.f32 	%r3164, %r3163, %r2862;
	add.f32 	%r3165, %r3164, %r2863;
	add.f32 	%r3166, %r3165, %r2864;
	add.f32 	%r3167, %r3166, %r2865;
	add.f32 	%r3168, %r3167, %r2866;
	add.f32 	%r3169, %r3168, %r2867;
	add.f32 	%r3170, %r3169, %r2868;
	add.f32 	%r3171, %r3170, %r2869;
	add.f32 	%r3172, %r3171, %r2870;
	add.f32 	%r3173, %r3172, %r2871;
	add.f32 	%r3174, %r3173, %r2872;
	add.f32 	%r3175, %r3174, %r2890;
	add.f32 	%r3176, %r3175, %r2891;
	add.f32 	%r3177, %r3176, %r2892;
	add.f32 	%r3178, %r3177, %r2893;
	add.f32 	%r3179, %r3178, %r2894;
	add.f32 	%r3180, %r3179, %r2895;
	add.f32 	%r3181, %r3180, %r2896;
	add.f32 	%r3182, %r3181, %r2897;
	add.f32 	%r3183, %r3182, %r2898;
	add.f32 	%r3184, %r3183, %r2899;
	add.f32 	%r3185, %r3184, %r2900;
	add.f32 	%r3186, %r3185, %r2901;
	add.f32 	%r3187, %r3186, %r2902;
	add.f32 	%r3188, %r3187, %r2903;
	add.f32 	%r3189, %r3188, %r2904;
	add.f32 	%r3190, %r3189, %r2905;
	add.f32 	%r3191, %r3190, %r2906;
	add.f32 	%r3192, %r3191, %r2907;
	add.f32 	%r3193, %r3192, %r2908;
	add.f32 	%r3194, %r3193, %r2909;
	add.f32 	%r3195, %r3194, %r2910;
	add.f32 	%r3196, %r3195, %r2911;
	add.f32 	%r3197, %r3196, %r2912;
	add.f32 	%r3198, %r3197, %r2913;
	add.f32 	%r3199, %r3198, %r2914;
	add.f32 	%r3200, %r3199, %r2915;
	add.f32 	%r3201, %r3200, %r2916;
	add.f32 	%r3202, %r3201, %r2917;
	add.f32 	%r3203, %r3202, %r2918;
	add.f32 	%r3204, %r3203, %r2919;
	add.f32 	%r3205, %r3204, %r2920;
	add.f32 	%r3206, %r3205, %r2921;
	add.f32 	%r3207, %r3206, %r2922;
	add.f32 	%r3208, %r3207, %r2923;
	add.f32 	%r3209, %r3208, %r2924;
	add.f32 	%r3210, %r3209, %r2925;
	add.f32 	%r3211, %r3210, %r2926;
	add.f32 	%r3212, %r3211, %r2927;
	add.f32 	%r3213, %r3212, %r2928;
	add.f32 	%r3214, %r3213, %r2929;
	add.f32 	%r3215, %r3214, %r2930;
	add.f32 	%r3216, %r3215, %r2931;
	add.f32 	%r3217, %r3216, %r2932;
	add.f32 	%r3218, %r3217, %r2933;
	add.f32 	%r3219, %r3218, %r2934;
	add.f32 	%r3220, %r3219, %r2935;
	add.f32 	%r3221, %r3220, %r2936;
	add.f32 	%r3222, %r3221, %r2937;
	add.f32 	%r3223, %r3222, %r2938;
	add.f32 	%r3224, %r3223, %r2939;
	add.f32 	%r3225, %r3224, %r2940;
	add.f32 	%r3226, %r3225, %r2941;
	add.f32 	%r3227, %r3226, %r2942;
	add.f32 	%r3228, %r3227, %r2943;
	add.f32 	%r3229, %r3228, %r2944;
	add.f32 	%r3230, %r3229, %r2945;
	add.f32 	%r3231, %r3230, %r2946;
	add.f32 	%r3232, %r3231, %r2947;
	add.f32 	%r3233, %r3232, %r2948;
	add.f32 	%r3234, %r3233, %r2949;
	add.f32 	%r3235, %r3234, %r2950;
	add.f32 	%r3236, %r3235, %r2951;
	add.f32 	%r3237, %r3236, %r2952;
	add.f32 	%r3238, %r3237, %r2953;
	.loc	1 636 28                        // 01-attention-forward.py:636:28 @[ 01-attention-forward.py:688:56 ]
	fma.rn.f32 	%r4869, %r4869, %r2039, %r3238;
	.loc	1 603 33                        // 01-attention-forward.py:603:33 @[ 01-attention-forward.py:688:56 ]
	add.s32 	%r4865, %r4865, 128;
	setp.lt.s32 	%p156, %r4865, %r199;
	mov.b32 	%r4862, %r4868;
	@%p156 bra 	$L__BB0_9;
	bra.uni 	$L__BB0_10;
$L__tmp29:
$L__BB0_33:                             //   in Loop: Header=BB0_2 Depth=1
	.loc	1 0 33                          // 01-attention-forward.py:0:33
	setmaxnreg.dec.sync.aligned.u32 	24;
	// begin inline asm
	barrier.sync 1 ;
	// end inline asm
$L__tmp30:
	.loc	2 40 28                         // standard.py:40:28 @[ 01-attention-forward.py:704:40 ]
	shr.s32 	%r204, %r4855, 31;
	shr.u32 	%r205, %r204, 24;
	add.s32 	%r206, %r4855, %r205;
	shr.s32 	%r207, %r206, 8;
	.loc	1 374 28                        // 01-attention-forward.py:374:28 @[ 01-attention-forward.py:704:40 ]
	mul.lo.s32 	%r130, %r207, %r4856;
$L__tmp31:
	.loc	1 705 63                        // 01-attention-forward.py:705:63
	setp.ge.s32 	%p4, %r4854, %r130;
	@%p4 bra 	$L__BB0_36;
// %bb.34:                              // %.lr.ph
                                        //   in Loop: Header=BB0_2 Depth=1
	.loc	1 0 63                          // 01-attention-forward.py:0:63
	shl.b32 	%r129, %r207, 3;
	and.b32 	%r131, %r1, 31;
	mov.b32 	%r211, 0;
	mov.b32 	%r4913, %r211;
	mov.b32 	%r4914, %r4854;
$L__BB0_35:                             //   Parent Loop BB0_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p9, %r131, 0;
$L__tmp32:
	.loc	1 379 26                        // 01-attention-forward.py:379:26 @[ 01-attention-forward.py:706:37 ]
	div.s32 	%r222, %r4914, %r129;
	.loc	1 380 29                        // 01-attention-forward.py:380:29 @[ 01-attention-forward.py:706:37 ]
	shl.b32 	%r223, %r222, 3;
	.loc	1 381 40                        // 01-attention-forward.py:381:40 @[ 01-attention-forward.py:706:37 ]
	sub.s32 	%r224, %r4856, %r223;
	.loc	1 381 53                        // 01-attention-forward.py:381:53 @[ 01-attention-forward.py:706:37 ]
	min.s32 	%r225, %r224, 8;
	.loc	1 382 37                        // 01-attention-forward.py:382:37 @[ 01-attention-forward.py:706:37 ]
	rem.s32 	%r226, %r4914, %r225;
	.loc	1 382 27                        // 01-attention-forward.py:382:27 @[ 01-attention-forward.py:706:37 ]
	add.s32 	%r227, %r223, %r226;
	.loc	1 383 49                        // 01-attention-forward.py:383:49 @[ 01-attention-forward.py:706:37 ]
	mul.lo.s32 	%r229, %r129, %r222;
	sub.s32 	%r230, %r4914, %r229;
	div.s32 	%r231, %r230, %r225;
	.loc	1 348 39                        // 01-attention-forward.py:348:39 @[ 01-attention-forward.py:706:37 ]
	shl.b32 	%r232, %r231, 8;
	.loc	1 348 29                        // 01-attention-forward.py:348:29 @[ 01-attention-forward.py:706:37 ]
	mad.lo.s32 	%r212, %r227, %r199, %r232;
$L__tmp33:
	.loc	1 167 29                        // 01-attention-forward.py:167:29 @[ 01-attention-forward.py:708:40 ]
	bar.warp.sync 	-1;
	add.s32 	%r209, %r4852, 98896;
	mov.pred 	%p5, -1;
	// begin inline asm
	
{
	@!%p5 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r209], %r4913;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
$L__tmp34:
	.loc	1 709 92                        // 01-attention-forward.py:709:92
	elect.sync 	%r234|%p6, -1;
	add.s32 	%r213, %r4852, 81920;
	// begin inline asm
	@%p6 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [%rd1, {%r211, %r212}], [%r213];
	// end inline asm
	cp.async.bulk.commit_group;
$L__tmp35:
	.loc	1 167 29                        // 01-attention-forward.py:167:29 @[ 01-attention-forward.py:711:40 ]
	bar.warp.sync 	-1;
	add.s32 	%r214, %r4852, 98904;
	// begin inline asm
	
{
	@!%p5 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r214], %r4913;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
	.loc	1 149 39                        // 01-attention-forward.py:149:39 @[ 01-attention-forward.py:711:40 ]
	xor.b32 	%r4913, %r4913, 1;
$L__tmp36:
	.loc	1 712 68                        // 01-attention-forward.py:712:68
	add.s32 	%r217, %r212, 128;
	.loc	1 712 92                        // 01-attention-forward.py:712:92
	elect.sync 	%r235|%p8, -1;
	add.s32 	%r218, %r4852, 90112;
	// begin inline asm
	@%p8 cp.async.bulk.tensor.2d.global.shared::cta.bulk_group [%rd1, {%r211, %r217}], [%r218];
	// end inline asm
	cp.async.bulk.commit_group;
	.loc	1 714 23                        // 01-attention-forward.py:714:23
	cp.async.bulk.wait_group.read 	1;
	bar.warp.sync 	-1;
	.loc	1 715 24                        // 01-attention-forward.py:715:24
	add.s32 	%r219, %r4852, 98912;
	// begin inline asm
	@%p9 mbarrier.arrive.shared::cta.b64 _, [%r219];
	// end inline asm
	.loc	1 716 23                        // 01-attention-forward.py:716:23
	cp.async.bulk.wait_group.read 	0;
	bar.warp.sync 	-1;
	.loc	1 717 24                        // 01-attention-forward.py:717:24
	add.s32 	%r220, %r4852, 98920;
	// begin inline asm
	@%p9 mbarrier.arrive.shared::cta.b64 _, [%r220];
	// end inline asm
	.loc	1 705 63                        // 01-attention-forward.py:705:63
	add.s32 	%r4914, %r4914, 78;
	setp.lt.s32 	%p11, %r4914, %r130;
	@%p11 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_36;
$L__BB0_19:                             //   in Loop: Header=BB0_2 Depth=1
	.loc	1 0 63                          // 01-attention-forward.py:0:63
	setmaxnreg.dec.sync.aligned.u32 	24;
	// begin inline asm
	barrier.sync 1 ;
	// end inline asm
$L__tmp37:
	.loc	1 370 30                        // 01-attention-forward.py:370:30 @[ 01-attention-forward.py:547:40 ]
	mov.u32 	%r4888, %ctaid.x;
	.loc	2 40 28                         // standard.py:40:28 @[ 01-attention-forward.py:547:40 ]
	shr.s32 	%r328, %r4855, 31;
	shr.u32 	%r329, %r328, 24;
	add.s32 	%r330, %r4855, %r329;
	shr.s32 	%r331, %r330, 8;
	.loc	1 374 28                        // 01-attention-forward.py:374:28 @[ 01-attention-forward.py:547:40 ]
	mul.lo.s32 	%r64, %r4856, %r331;
$L__tmp38:
	.loc	1 548 63                        // 01-attention-forward.py:548:63
	setp.ge.s32 	%p38, %r4888, %r64;
	@%p38 bra 	$L__BB0_25;
// %bb.20:                              // %.lr.ph869
                                        //   in Loop: Header=BB0_2 Depth=1
	.loc	1 0 63                          // 01-attention-forward.py:0:63
	ld.shared.b32 	%r372, [global_smem+98304];
	ld.shared.b32 	%r354, [global_smem+98312];
	ld.shared.b32 	%r502, [global_smem+98320];
	shr.u32 	%r335, %r4857, 25;
	add.s32 	%r336, %r199, %r335;
	shr.s32 	%r337, %r336, 7;
	add.s32 	%r339, %r4852, 65536;
	bfe.u32 	%r340, %r339, 4, 14;
	cvt.u64.u32 	%rd35, %r340;
	or.b64 	%rd39, %rd35, -9223371899382267904;
	add.s32 	%r341, %r4852, 65568;
	bfe.u32 	%r342, %r341, 4, 14;
	cvt.u64.u32 	%rd36, %r342;
	or.b64 	%rd41, %rd36, -9223371899382267904;
	add.s32 	%r343, %r4852, 73728;
	bfe.u32 	%r344, %r343, 4, 14;
	cvt.u64.u32 	%rd37, %r344;
	or.b64 	%rd44, %rd37, -9223371899382267904;
	add.s32 	%r345, %r4852, 73760;
	bfe.u32 	%r346, %r345, 4, 14;
	cvt.u64.u32 	%rd38, %r346;
	or.b64 	%rd46, %rd38, -9223371899382267904;
	add.s32 	%r501, %r372, 64;
	.loc	1 548 63                        // 01-attention-forward.py:548:63
	max.s32 	%r347, %r337, 2;
	add.s32 	%r66, %r347, -1;
	mov.b32 	%r4901, 0;
	mov.b32 	%r4900, %r4901;
	mov.b32 	%r4899, %r4901;
	mov.b32 	%r4898, %r4901;
	mov.b32 	%r4897, %r4901;
	mov.b32 	%r4887, %r4901;
	bra.uni 	$L__BB0_21;
$L__BB0_24:                             // %._crit_edge858
                                        //   in Loop: Header=BB0_21 Depth=2
	.loc	1 0 63                          // 01-attention-forward.py:0:63
	xor.b32 	%r4887, %r4887, 1;
	setp.gt.s32 	%p115, %r199, 255;
	.loc	1 588 23                        // 01-attention-forward.py:588:23
	elect.sync 	%r513|%p111, -1;
	add.s32 	%r515, %r4852, 98848;
	cvt.u64.u32 	%rd93, %r515;
	// begin inline asm
	@%p111 tcgen05.commit.cta_group::1.mbarrier::arrive::one.b64 [%rd93];
	// end inline asm
	.loc	1 589 23                        // 01-attention-forward.py:589:23
	bar.warp.sync 	-1;
	elect.sync 	%r516|%p112, -1;
	add.s32 	%r517, %r4852, 98856;
	cvt.u64.u32 	%rd94, %r517;
	// begin inline asm
	@%p112 tcgen05.commit.cta_group::1.mbarrier::arrive::one.b64 [%rd94];
	// end inline asm
$L__tmp39:
	.loc	1 158 29                        // 01-attention-forward.py:158:29 @[ 01-attention-forward.py:591:38 ]
	add.s32 	%r497, %r4852, 98888;
	// begin inline asm
	
{
	@!%p113 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r497], %r4899;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
	.loc	1 149 39                        // 01-attention-forward.py:149:39 @[ 01-attention-forward.py:591:38 ]
	xor.b32 	%r4899, %r4899, 1;
$L__tmp40:
	.loc	1 158 29                        // 01-attention-forward.py:158:29 @[ 01-attention-forward.py:592:39 ]
	// begin inline asm
	
{
	@!%p113 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r360], %r4903;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
$L__tmp41:
	.loc	1 253 28                        // 01-attention-forward.py:253:28 @[ 01-attention-forward.py:594:37 ]
	elect.sync 	%r518|%p116, -1;
	// begin inline asm
	@%p116 tcgen05.mma.cta_group::1.kind::f8f6f4 [ %r501 + 0 ], [ %r502 + 0 ], %rd111, %r503, %p115;
	// end inline asm
	// begin inline asm
	@%p116 tcgen05.mma.cta_group::1.kind::f8f6f4 [ %r501 + 0 ], [ %r502 + 8 ], %rd110, %r503, %p113;
	// end inline asm
	// begin inline asm
	@%p116 tcgen05.mma.cta_group::1.kind::f8f6f4 [ %r501 + 0 ], [ %r502 + 16 ], %rd109, %r503, %p113;
	// end inline asm
	// begin inline asm
	@%p116 tcgen05.mma.cta_group::1.kind::f8f6f4 [ %r501 + 0 ], [ %r502 + 24 ], %rd108, %r503, %p113;
	// end inline asm
	add.s32 	%r519, %r4852, 98872;
	cvt.u64.u32 	%rd99, %r519;
	// begin inline asm
	@%p116 tcgen05.commit.cta_group::1.mbarrier::arrive::one.b64 [%rd99];
	// end inline asm
	cvt.u64.u32 	%rd100, %r4902;
	// begin inline asm
	@%p116 tcgen05.commit.cta_group::1.mbarrier::arrive::one.b64 [%rd100];
	// end inline asm
	// begin inline asm
	@%p116 tcgen05.commit.cta_group::1.mbarrier::arrive::one.b64 [%rd43];
	// end inline asm
	// begin inline asm
	@%p116 tcgen05.commit.cta_group::1.mbarrier::arrive::one.b64 [%rd48];
	// end inline asm
$L__tmp42:
	.loc	1 548 63                        // 01-attention-forward.py:548:63
	add.s32 	%r4888, %r4888, 78;
	setp.lt.s32 	%p127, %r4888, %r64;
	@%p127 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_25;
$L__BB0_21:                             //   Parent Loop BB0_2 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_23 Depth 3
$L__tmp43:
	.loc	1 167 29                        // 01-attention-forward.py:167:29 @[ 01-attention-forward.py:553:38 ]
	add.s32 	%r348, %r4852, 98832;
	mov.pred 	%p113, -1;
	// begin inline asm
	
{
	@!%p113 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r348], %r4887;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
$L__tmp44:
	.loc	1 163 25                        // 01-attention-forward.py:163:25 @[ 01-attention-forward.py:554:37 ]
	shl.b32 	%r385, %r4898, 13;
	add.s32 	%r386, %r4852, %r385;
	.loc	1 164 38                        // 01-attention-forward.py:164:38 @[ 01-attention-forward.py:554:37 ]
	shl.b32 	%r387, %r4898, 3;
	add.s32 	%r388, %r4852, 98704;
	add.s32 	%r350, %r388, %r387;
	.loc	1 165 38                        // 01-attention-forward.py:165:38 @[ 01-attention-forward.py:554:37 ]
	add.s32 	%r389, %r4852, 98768;
	add.s32 	%r390, %r389, %r387;
	.loc	1 167 29                        // 01-attention-forward.py:167:29 @[ 01-attention-forward.py:554:37 ]
	// begin inline asm
	
{
	@!%p113 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r350], %r4897;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
	.loc	1 146 25                        // 01-attention-forward.py:146:25 @[ 01-attention-forward.py:554:37 ]
	add.s32 	%r391, %r4898, 1;
	.loc	1 147 29                        // 01-attention-forward.py:147:29 @[ 01-attention-forward.py:554:37 ]
	setp.eq.s32 	%p68, %r391, 8;
	.loc	1 148 34                        // 01-attention-forward.py:148:34 @[ 01-attention-forward.py:554:37 ]
	selp.b32 	%r392, 0, %r391, %p68;
	.loc	1 149 42                        // 01-attention-forward.py:149:42 @[ 01-attention-forward.py:554:37 ]
	selp.b32 	%r393, 1, 0, %p68;
	xor.b32 	%r367, %r4897, %r393;
$L__tmp45:
	.loc	1 158 29                        // 01-attention-forward.py:158:29 @[ 01-attention-forward.py:555:39 ]
	add.s32 	%r352, %r4852, 98960;
	// begin inline asm
	
{
	@!%p113 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r352], %r4900;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
	.loc	1 145 40                        // 01-attention-forward.py:145:40 @[ 01-attention-forward.py:555:39 ]
	xor.b32 	%r371, %r4900, 1;
$L__tmp46:
	.loc	1 253 28                        // 01-attention-forward.py:253:28 @[ 01-attention-forward.py:556:53 ]
	elect.sync 	%r394|%p43, -1;
	bfe.u32 	%r395, %r386, 4, 14;
	cvt.u64.u32 	%rd55, %r395;
	or.b64 	%rd40, %rd55, -9223371899382267904;
	mov.b32 	%r355, 136316048;
	mov.pred 	%p297, 0;
	// begin inline asm
	@%p43 tcgen05.mma.cta_group::1.kind::f8f6f4 [ %r354 + 0 ], %rd39, %rd40, %r355, %p297;
	// end inline asm
	add.s32 	%r396, %r386, 32;
	bfe.u32 	%r397, %r396, 4, 14;
	cvt.u64.u32 	%rd56, %r397;
	or.b64 	%rd42, %rd56, -9223371899382267904;
	// begin inline asm
	@%p43 tcgen05.mma.cta_group::1.kind::f8f6f4 [ %r354 + 0 ], %rd41, %rd42, %r355, %p113;
	// end inline asm
	add.s32 	%r398, %r4852, 98944;
	cvt.u64.u32 	%rd43, %r398;
	// begin inline asm
	@%p43 tcgen05.commit.cta_group::1.mbarrier::arrive::one.b64 [%rd43];
	// end inline asm
$L__tmp47:
	.loc	1 167 29                        // 01-attention-forward.py:167:29 @[ 01-attention-forward.py:558:38 ]
	bar.warp.sync 	-1;
	add.s32 	%r358, %r4852, 98840;
	// begin inline asm
	
{
	@!%p113 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r358], %r4887;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
$L__tmp48:
	.loc	1 158 29                        // 01-attention-forward.py:158:29 @[ 01-attention-forward.py:559:39 ]
	add.s32 	%r360, %r4852, 98992;
	// begin inline asm
	
{
	@!%p113 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r360], %r4901;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
$L__tmp49:
	.loc	1 253 28                        // 01-attention-forward.py:253:28 @[ 01-attention-forward.py:560:53 ]
	elect.sync 	%r399|%p50, -1;
	// begin inline asm
	@%p50 tcgen05.mma.cta_group::1.kind::f8f6f4 [ %r502 + 0 ], %rd44, %rd40, %r355, %p297;
	// end inline asm
	// begin inline asm
	@%p50 tcgen05.mma.cta_group::1.kind::f8f6f4 [ %r502 + 0 ], %rd46, %rd42, %r355, %p113;
	// end inline asm
	add.s32 	%r400, %r4852, 98976;
	cvt.u64.u32 	%rd48, %r400;
	// begin inline asm
	@%p50 tcgen05.commit.cta_group::1.mbarrier::arrive::one.b64 [%rd48];
	// end inline asm
	cvt.u64.u32 	%rd49, %r390;
	// begin inline asm
	@%p50 tcgen05.commit.cta_group::1.mbarrier::arrive::one.b64 [%rd49];
	// end inline asm
$L__tmp50:
	.loc	1 163 25                        // 01-attention-forward.py:163:25 @[ 01-attention-forward.py:562:37 ]
	shl.b32 	%r401, %r392, 13;
	add.s32 	%r4892, %r4852, %r401;
	.loc	1 164 38                        // 01-attention-forward.py:164:38 @[ 01-attention-forward.py:562:37 ]
	shl.b32 	%r402, %r392, 3;
	add.s32 	%r366, %r388, %r402;
	.loc	1 167 29                        // 01-attention-forward.py:167:29 @[ 01-attention-forward.py:562:37 ]
	// begin inline asm
	
{
	@!%p113 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r366], %r367;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
	.loc	1 146 25                        // 01-attention-forward.py:146:25 @[ 01-attention-forward.py:562:37 ]
	add.s32 	%r403, %r392, 1;
	.loc	1 147 29                        // 01-attention-forward.py:147:29 @[ 01-attention-forward.py:562:37 ]
	setp.eq.s32 	%p69, %r403, 8;
	.loc	1 148 34                        // 01-attention-forward.py:148:34 @[ 01-attention-forward.py:562:37 ]
	selp.b32 	%r4898, 0, %r403, %p69;
	.loc	1 149 42                        // 01-attention-forward.py:149:42 @[ 01-attention-forward.py:562:37 ]
	selp.b32 	%r404, 1, 0, %p69;
	xor.b32 	%r4897, %r367, %r404;
$L__tmp51:
	.loc	1 158 29                        // 01-attention-forward.py:158:29 @[ 01-attention-forward.py:563:38 ]
	add.s32 	%r368, %r4852, 98880;
	// begin inline asm
	
{
	@!%p113 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r368], %r4899;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
$L__tmp52:
	.loc	1 158 29                        // 01-attention-forward.py:158:29 @[ 01-attention-forward.py:564:39 ]
	// begin inline asm
	
{
	@!%p113 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r352], %r371;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
$L__tmp53:
	.loc	1 253 28                        // 01-attention-forward.py:253:28 @[ 01-attention-forward.py:566:37 ]
	elect.sync 	%r405|%p59, -1;
	add.s32 	%r406, %r4892, 2048;
	add.s32 	%r407, %r4892, 4096;
	add.s32 	%r408, %r4892, 6144;
	bfe.u32 	%r409, %r408, 4, 14;
	bfe.u32 	%r410, %r407, 4, 14;
	bfe.u32 	%r411, %r406, 4, 14;
	bfe.u32 	%r412, %r4892, 4, 14;
	cvt.u64.u32 	%rd57, %r412;
	cvt.u64.u32 	%rd58, %r411;
	cvt.u64.u32 	%rd59, %r410;
	cvt.u64.u32 	%rd60, %r409;
	or.b64 	%rd108, %rd60, -9223371899382267904;
	or.b64 	%rd109, %rd59, -9223371899382267904;
	or.b64 	%rd110, %rd58, -9223371899382267904;
	or.b64 	%rd111, %rd57, -9223371899382267904;
	mov.b32 	%r503, 135333008;
	// begin inline asm
	@%p59 tcgen05.mma.cta_group::1.kind::f8f6f4 [ %r372 + 0 ], [ %r354 + 0 ], %rd111, %r503, %p297;
	// end inline asm
	// begin inline asm
	@%p59 tcgen05.mma.cta_group::1.kind::f8f6f4 [ %r372 + 0 ], [ %r354 + 8 ], %rd110, %r503, %p113;
	// end inline asm
	// begin inline asm
	@%p59 tcgen05.mma.cta_group::1.kind::f8f6f4 [ %r372 + 0 ], [ %r354 + 16 ], %rd109, %r503, %p113;
	// end inline asm
	// begin inline asm
	@%p59 tcgen05.mma.cta_group::1.kind::f8f6f4 [ %r372 + 0 ], [ %r354 + 24 ], %rd108, %r503, %p113;
	// end inline asm
	add.s32 	%r413, %r4852, 98864;
	cvt.u64.u32 	%rd54, %r413;
	// begin inline asm
	@%p59 tcgen05.commit.cta_group::1.mbarrier::arrive::one.b64 [%rd54];
	// end inline asm
$L__tmp54:
	.loc	1 165 38                        // 01-attention-forward.py:165:38 @[ 01-attention-forward.py:0 ]
	add.s32 	%r4902, %r389, %r402;
	.loc	1 145 40                        // 01-attention-forward.py:145:40 @[ 01-attention-forward.py:0 ]
	xor.b32 	%r4903, %r4901, 1;
$L__tmp55:
	.loc	1 569 23                        // 01-attention-forward.py:569:23
	@%p296 bra 	$L__BB0_24;
// %bb.22:                              // %.lr.ph857.preheader
                                        //   in Loop: Header=BB0_21 Depth=2
	.loc	1 0 23                          // 01-attention-forward.py:0:23
	mov.b32 	%r4889, %r66;
$L__BB0_23:                             // %.lr.ph857
                                        //   Parent Loop BB0_2 Depth=1
                                        //     Parent Loop BB0_21 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	mov.b32 	%r4901, %r4903;
$L__tmp56:
	.loc	1 163 25                        // 01-attention-forward.py:163:25 @[ 01-attention-forward.py:570:41 ]
	shl.b32 	%r458, %r4898, 13;
	add.s32 	%r460, %r4852, %r458;
	.loc	1 164 38                        // 01-attention-forward.py:164:38 @[ 01-attention-forward.py:570:41 ]
	shl.b32 	%r461, %r4898, 3;
	add.s32 	%r414, %r388, %r461;
	.loc	1 165 38                        // 01-attention-forward.py:165:38 @[ 01-attention-forward.py:570:41 ]
	add.s32 	%r464, %r389, %r461;
	.loc	1 167 29                        // 01-attention-forward.py:167:29 @[ 01-attention-forward.py:570:41 ]
	bar.warp.sync 	-1;
	mov.pred 	%p71, -1;
	// begin inline asm
	
{
	@!%p71 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r414], %r4897;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
	.loc	1 146 25                        // 01-attention-forward.py:146:25 @[ 01-attention-forward.py:570:41 ]
	add.s32 	%r465, %r4898, 1;
	.loc	1 147 29                        // 01-attention-forward.py:147:29 @[ 01-attention-forward.py:570:41 ]
	setp.eq.s32 	%p108, %r465, 8;
	.loc	1 148 34                        // 01-attention-forward.py:148:34 @[ 01-attention-forward.py:570:41 ]
	selp.b32 	%r466, 0, %r465, %p108;
	.loc	1 149 42                        // 01-attention-forward.py:149:42 @[ 01-attention-forward.py:570:41 ]
	selp.b32 	%r467, 1, 0, %p108;
	xor.b32 	%r441, %r4897, %r467;
$L__tmp57:
	.loc	1 253 28                        // 01-attention-forward.py:253:28 @[ 01-attention-forward.py:571:57 ]
	elect.sync 	%r468|%p73, -1;
	bfe.u32 	%r469, %r460, 4, 14;
	cvt.u64.u32 	%rd83, %r469;
	or.b64 	%rd62, %rd83, -9223371899382267904;
	mov.b32 	%r417, 136316048;
	mov.pred 	%p72, 0;
	// begin inline asm
	@%p73 tcgen05.mma.cta_group::1.kind::f8f6f4 [ %r354 + 0 ], %rd39, %rd62, %r417, %p72;
	// end inline asm
	add.s32 	%r470, %r460, 32;
	bfe.u32 	%r471, %r470, 4, 14;
	cvt.u64.u32 	%rd84, %r471;
	or.b64 	%rd64, %rd84, -9223371899382267904;
	// begin inline asm
	@%p73 tcgen05.mma.cta_group::1.kind::f8f6f4 [ %r354 + 0 ], %rd41, %rd64, %r417, %p71;
	// end inline asm
	// begin inline asm
	@%p73 tcgen05.commit.cta_group::1.mbarrier::arrive::one.b64 [%rd43];
	// end inline asm
$L__tmp58:
	.loc	1 158 29                        // 01-attention-forward.py:158:29 @[ 01-attention-forward.py:573:42 ]
	add.s32 	%r420, %r4852, 98888;
	// begin inline asm
	
{
	@!%p71 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r420], %r4899;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
	.loc	1 149 39                        // 01-attention-forward.py:149:39 @[ 01-attention-forward.py:573:42 ]
	xor.b32 	%r4899, %r4899, 1;
$L__tmp59:
	.loc	1 158 29                        // 01-attention-forward.py:158:29 @[ 01-attention-forward.py:574:43 ]
	// begin inline asm
	
{
	@!%p71 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r360], %r4901;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
$L__tmp60:
	.loc	1 253 28                        // 01-attention-forward.py:253:28 @[ 01-attention-forward.py:576:41 ]
	elect.sync 	%r473|%p80, -1;
	bfe.u32 	%r474, %r4892, 4, 14;
	cvt.u64.u32 	%rd85, %r474;
	or.b64 	%rd66, %rd85, -9223371899382267904;
	mov.b32 	%r426, 135333008;
	// begin inline asm
	@%p80 tcgen05.mma.cta_group::1.kind::f8f6f4 [ %r501 + 0 ], [ %r502 + 0 ], %rd66, %r426, %p297;
	// end inline asm
	add.s32 	%r475, %r4892, 2048;
	bfe.u32 	%r476, %r475, 4, 14;
	cvt.u64.u32 	%rd86, %r476;
	or.b64 	%rd67, %rd86, -9223371899382267904;
	// begin inline asm
	@%p80 tcgen05.mma.cta_group::1.kind::f8f6f4 [ %r501 + 0 ], [ %r502 + 8 ], %rd67, %r426, %p71;
	// end inline asm
	add.s32 	%r477, %r4892, 4096;
	bfe.u32 	%r478, %r477, 4, 14;
	cvt.u64.u32 	%rd87, %r478;
	or.b64 	%rd68, %rd87, -9223371899382267904;
	// begin inline asm
	@%p80 tcgen05.mma.cta_group::1.kind::f8f6f4 [ %r501 + 0 ], [ %r502 + 16 ], %rd68, %r426, %p71;
	// end inline asm
	add.s32 	%r479, %r4892, 6144;
	bfe.u32 	%r480, %r479, 4, 14;
	cvt.u64.u32 	%rd88, %r480;
	or.b64 	%rd69, %rd88, -9223371899382267904;
	// begin inline asm
	@%p80 tcgen05.mma.cta_group::1.kind::f8f6f4 [ %r501 + 0 ], [ %r502 + 24 ], %rd69, %r426, %p71;
	// end inline asm
	add.s32 	%r481, %r4852, 98872;
	cvt.u64.u32 	%rd70, %r481;
	// begin inline asm
	@%p80 tcgen05.commit.cta_group::1.mbarrier::arrive::one.b64 [%rd70];
	// end inline asm
	cvt.u64.u32 	%rd71, %r4902;
	// begin inline asm
	@%p80 tcgen05.commit.cta_group::1.mbarrier::arrive::one.b64 [%rd71];
	// end inline asm
$L__tmp61:
	.loc	1 253 28                        // 01-attention-forward.py:253:28 @[ 01-attention-forward.py:579:57 ]
	elect.sync 	%r482|%p90, -1;
	// begin inline asm
	@%p90 tcgen05.mma.cta_group::1.kind::f8f6f4 [ %r502 + 0 ], %rd44, %rd62, %r417, %p72;
	// end inline asm
	// begin inline asm
	@%p90 tcgen05.mma.cta_group::1.kind::f8f6f4 [ %r502 + 0 ], %rd46, %rd64, %r417, %p71;
	// end inline asm
	// begin inline asm
	@%p90 tcgen05.commit.cta_group::1.mbarrier::arrive::one.b64 [%rd48];
	// end inline asm
	cvt.u64.u32 	%rd77, %r464;
	// begin inline asm
	@%p90 tcgen05.commit.cta_group::1.mbarrier::arrive::one.b64 [%rd77];
	// end inline asm
$L__tmp62:
	.loc	1 163 25                        // 01-attention-forward.py:163:25 @[ 01-attention-forward.py:581:41 ]
	shl.b32 	%r484, %r466, 13;
	add.s32 	%r4892, %r4852, %r484;
	.loc	1 164 38                        // 01-attention-forward.py:164:38 @[ 01-attention-forward.py:581:41 ]
	shl.b32 	%r485, %r466, 3;
	add.s32 	%r440, %r388, %r485;
	.loc	1 167 29                        // 01-attention-forward.py:167:29 @[ 01-attention-forward.py:581:41 ]
	bar.warp.sync 	-1;
	// begin inline asm
	
{
	@!%p71 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r440], %r441;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
	.loc	1 146 25                        // 01-attention-forward.py:146:25 @[ 01-attention-forward.py:581:41 ]
	add.s32 	%r486, %r466, 1;
	.loc	1 147 29                        // 01-attention-forward.py:147:29 @[ 01-attention-forward.py:581:41 ]
	setp.eq.s32 	%p109, %r486, 8;
	.loc	1 148 34                        // 01-attention-forward.py:148:34 @[ 01-attention-forward.py:581:41 ]
	selp.b32 	%r4898, 0, %r486, %p109;
	.loc	1 149 42                        // 01-attention-forward.py:149:42 @[ 01-attention-forward.py:581:41 ]
	selp.b32 	%r487, 1, 0, %p109;
	xor.b32 	%r4897, %r441, %r487;
$L__tmp63:
	.loc	1 158 29                        // 01-attention-forward.py:158:29 @[ 01-attention-forward.py:582:42 ]
	// begin inline asm
	
{
	@!%p71 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r368], %r4899;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
$L__tmp64:
	.loc	1 158 29                        // 01-attention-forward.py:158:29 @[ 01-attention-forward.py:583:43 ]
	// begin inline asm
	
{
	@!%p71 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r352], %r4900;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
	.loc	1 145 40                        // 01-attention-forward.py:145:40 @[ 01-attention-forward.py:583:43 ]
	xor.b32 	%r4900, %r4900, 1;
$L__tmp65:
	.loc	1 253 28                        // 01-attention-forward.py:253:28 @[ 01-attention-forward.py:585:41 ]
	elect.sync 	%r488|%p99, -1;
	add.s32 	%r489, %r4892, 2048;
	add.s32 	%r490, %r4892, 4096;
	add.s32 	%r491, %r4892, 6144;
	bfe.u32 	%r492, %r491, 4, 14;
	bfe.u32 	%r493, %r490, 4, 14;
	bfe.u32 	%r494, %r489, 4, 14;
	bfe.u32 	%r495, %r4892, 4, 14;
	cvt.u64.u32 	%rd89, %r495;
	cvt.u64.u32 	%rd90, %r494;
	cvt.u64.u32 	%rd91, %r493;
	cvt.u64.u32 	%rd92, %r492;
	or.b64 	%rd108, %rd92, -9223371899382267904;
	or.b64 	%rd109, %rd91, -9223371899382267904;
	or.b64 	%rd110, %rd90, -9223371899382267904;
	or.b64 	%rd111, %rd89, -9223371899382267904;
	// begin inline asm
	@%p99 tcgen05.mma.cta_group::1.kind::f8f6f4 [ %r372 + 0 ], [ %r354 + 0 ], %rd111, %r426, %p71;
	// end inline asm
	// begin inline asm
	@%p99 tcgen05.mma.cta_group::1.kind::f8f6f4 [ %r372 + 0 ], [ %r354 + 8 ], %rd110, %r426, %p71;
	// end inline asm
	// begin inline asm
	@%p99 tcgen05.mma.cta_group::1.kind::f8f6f4 [ %r372 + 0 ], [ %r354 + 16 ], %rd109, %r426, %p71;
	// end inline asm
	// begin inline asm
	@%p99 tcgen05.mma.cta_group::1.kind::f8f6f4 [ %r372 + 0 ], [ %r354 + 24 ], %rd108, %r426, %p71;
	// end inline asm
	// begin inline asm
	@%p99 tcgen05.commit.cta_group::1.mbarrier::arrive::one.b64 [%rd54];
	// end inline asm
$L__tmp66:
	.loc	1 165 38                        // 01-attention-forward.py:165:38 @[ 01-attention-forward.py:0 ]
	add.s32 	%r4902, %r389, %r485;
	.loc	1 145 40                        // 01-attention-forward.py:145:40 @[ 01-attention-forward.py:0 ]
	xor.b32 	%r4903, %r4901, 1;
$L__tmp67:
	.loc	1 569 23                        // 01-attention-forward.py:569:23
	add.s32 	%r4889, %r4889, -1;
	setp.ne.s32 	%p110, %r4889, 0;
	mov.pred 	%p297, %p71;
	@%p110 bra 	$L__BB0_23;
	bra.uni 	$L__BB0_24;
$L__BB0_25:                             // %._crit_edge870
                                        //   in Loop: Header=BB0_2 Depth=1
	.loc	1 0 23                          // 01-attention-forward.py:0:23
	// begin inline asm
	barrier.sync 1 ;
	// end inline asm
	setmaxnreg.inc.sync.aligned.u32 	80;
	bra.uni 	$L__BB0_2;
$L__BB0_26:                             //   in Loop: Header=BB0_2 Depth=1
	setmaxnreg.dec.sync.aligned.u32 	24;
	// begin inline asm
	barrier.sync 1 ;
	// end inline asm
$L__tmp68:
	.loc	1 370 30                        // 01-attention-forward.py:370:30 @[ 01-attention-forward.py:507:40 ]
	mov.u32 	%r4907, %ctaid.x;
	.loc	2 40 28                         // standard.py:40:28 @[ 01-attention-forward.py:507:40 ]
	shr.s32 	%r237, %r4855, 31;
	shr.u32 	%r238, %r237, 24;
	add.s32 	%r239, %r4855, %r238;
	shr.s32 	%r240, %r239, 8;
	.loc	1 374 28                        // 01-attention-forward.py:374:28 @[ 01-attention-forward.py:507:40 ]
	mul.lo.s32 	%r108, %r240, %r4856;
$L__tmp69:
	.loc	1 508 63                        // 01-attention-forward.py:508:63
	setp.ge.s32 	%p12, %r4907, %r108;
	@%p12 bra 	$L__BB0_32;
// %bb.27:                              // %.lr.ph851
                                        //   in Loop: Header=BB0_2 Depth=1
	.loc	1 0 63                          // 01-attention-forward.py:0:63
	shl.b32 	%r107, %r240, 3;
	and.b32 	%r109, %r1, 31;
	mov.b32 	%r246, 0;
	mov.b32 	%r4912, %r246;
	mov.b32 	%r4911, %r246;
	mov.b32 	%r4906, %r246;
	bra.uni 	$L__BB0_28;
$L__BB0_31:                             // %._crit_edge848
                                        //   in Loop: Header=BB0_28 Depth=2
	xor.b32 	%r4906, %r4906, 1;
	.loc	1 508 63                        // 01-attention-forward.py:508:63
	add.s32 	%r4907, %r4907, 78;
	setp.lt.s32 	%p37, %r4907, %r108;
	@%p37 bra 	$L__BB0_28;
	bra.uni 	$L__BB0_32;
$L__BB0_28:                             //   Parent Loop BB0_2 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_30 Depth 3
	.loc	1 0 63                          // 01-attention-forward.py:0:63
	setp.lt.s32 	%p25, %r199, 129;
	setp.eq.s32 	%p14, %r109, 0;
$L__tmp70:
	.loc	1 379 26                        // 01-attention-forward.py:379:26 @[ 01-attention-forward.py:509:37 ]
	div.s32 	%r271, %r4907, %r107;
	.loc	1 380 29                        // 01-attention-forward.py:380:29 @[ 01-attention-forward.py:509:37 ]
	shl.b32 	%r272, %r271, 3;
	.loc	1 381 40                        // 01-attention-forward.py:381:40 @[ 01-attention-forward.py:509:37 ]
	sub.s32 	%r273, %r4856, %r272;
	.loc	1 381 53                        // 01-attention-forward.py:381:53 @[ 01-attention-forward.py:509:37 ]
	min.s32 	%r274, %r273, 8;
	.loc	1 382 37                        // 01-attention-forward.py:382:37 @[ 01-attention-forward.py:509:37 ]
	rem.s32 	%r275, %r4907, %r274;
	.loc	1 382 27                        // 01-attention-forward.py:382:27 @[ 01-attention-forward.py:509:37 ]
	add.s32 	%r276, %r272, %r275;
	.loc	1 383 23                        // 01-attention-forward.py:383:23 @[ 01-attention-forward.py:509:37 ]
	mul.lo.s32 	%r278, %r271, %r107;
	sub.s32 	%r279, %r4907, %r278;
	.loc	1 383 49                        // 01-attention-forward.py:383:49 @[ 01-attention-forward.py:509:37 ]
	div.s32 	%r280, %r279, %r274;
	.loc	1 347 47                        // 01-attention-forward.py:347:47 @[ 01-attention-forward.py:509:37 ]
	mul.lo.s32 	%r254, %r276, %r199;
	.loc	1 348 39                        // 01-attention-forward.py:348:39 @[ 01-attention-forward.py:509:37 ]
	shl.b32 	%r281, %r280, 8;
	.loc	1 348 29                        // 01-attention-forward.py:348:29 @[ 01-attention-forward.py:509:37 ]
	add.s32 	%r247, %r254, %r281;
$L__tmp71:
	.loc	1 158 29                        // 01-attention-forward.py:158:29 @[ 01-attention-forward.py:513:38 ]
	add.s32 	%r242, %r4852, 98848;
	mov.pred 	%p13, -1;
	// begin inline asm
	
{
	@!%p13 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r242], %r4906;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
$L__tmp72:
	.loc	1 247 25                        // 01-attention-forward.py:247:25 @[ 01-attention-forward.py:514:54 ]
	add.s32 	%r244, %r4852, 98832;
	// begin inline asm
	@%p14 mbarrier.arrive.expect_tx.shared.b64 _, [%r244], 8192;
	// end inline asm
	.loc	1 248 60                        // 01-attention-forward.py:248:60 @[ 01-attention-forward.py:514:54 ]
	bar.warp.sync 	-1;
	elect.sync 	%r283|%p15, -1;
	add.s32 	%r245, %r4852, 65536;
	// begin inline asm
	@%p15 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [%r245], [%rd4, {%r246, %r247}], [%r244];
	// end inline asm
$L__tmp73:
	.loc	1 154 25                        // 01-attention-forward.py:154:25 @[ 01-attention-forward.py:517:37 ]
	shl.b32 	%r284, %r4912, 13;
	add.s32 	%r252, %r4852, %r284;
	.loc	1 155 38                        // 01-attention-forward.py:155:38 @[ 01-attention-forward.py:517:37 ]
	shl.b32 	%r285, %r4912, 3;
	add.s32 	%r286, %r4852, 98704;
	add.s32 	%r251, %r286, %r285;
	.loc	1 156 38                        // 01-attention-forward.py:156:38 @[ 01-attention-forward.py:517:37 ]
	add.s32 	%r287, %r4852, 98768;
	add.s32 	%r249, %r287, %r285;
	.loc	1 158 29                        // 01-attention-forward.py:158:29 @[ 01-attention-forward.py:517:37 ]
	// begin inline asm
	
{
	@!%p13 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r249], %r4911;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
	.loc	1 146 25                        // 01-attention-forward.py:146:25 @[ 01-attention-forward.py:517:37 ]
	add.s32 	%r288, %r4912, 1;
	.loc	1 147 29                        // 01-attention-forward.py:147:29 @[ 01-attention-forward.py:517:37 ]
	setp.eq.s32 	%p26, %r288, 8;
	.loc	1 148 34                        // 01-attention-forward.py:148:34 @[ 01-attention-forward.py:517:37 ]
	selp.b32 	%r289, 0, %r288, %p26;
	.loc	1 149 42                        // 01-attention-forward.py:149:42 @[ 01-attention-forward.py:517:37 ]
	selp.b32 	%r290, 1, 0, %p26;
	xor.b32 	%r264, %r4911, %r290;
$L__tmp74:
	.loc	1 247 25                        // 01-attention-forward.py:247:25 @[ 01-attention-forward.py:518:52 ]
	// begin inline asm
	@%p14 mbarrier.arrive.expect_tx.shared.b64 _, [%r251], 8192;
	// end inline asm
	.loc	1 248 60                        // 01-attention-forward.py:248:60 @[ 01-attention-forward.py:518:52 ]
	bar.warp.sync 	-1;
	elect.sync 	%r291|%p18, -1;
	// begin inline asm
	@%p18 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [%r252], [%rd3, {%r246, %r254}], [%r251];
	// end inline asm
$L__tmp75:
	.loc	1 520 39                        // 01-attention-forward.py:520:39
	add.s32 	%r261, %r247, 128;
$L__tmp76:
	.loc	1 158 29                        // 01-attention-forward.py:158:29 @[ 01-attention-forward.py:521:38 ]
	add.s32 	%r256, %r4852, 98856;
	// begin inline asm
	
{
	@!%p13 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r256], %r4906;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
$L__tmp77:
	.loc	1 247 25                        // 01-attention-forward.py:247:25 @[ 01-attention-forward.py:522:54 ]
	add.s32 	%r258, %r4852, 98840;
	// begin inline asm
	@%p14 mbarrier.arrive.expect_tx.shared.b64 _, [%r258], 8192;
	// end inline asm
	.loc	1 248 60                        // 01-attention-forward.py:248:60 @[ 01-attention-forward.py:522:54 ]
	bar.warp.sync 	-1;
	elect.sync 	%r292|%p21, -1;
	add.s32 	%r259, %r4852, 73728;
	// begin inline asm
	@%p21 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [%r259], [%rd4, {%r246, %r261}], [%r258];
	// end inline asm
$L__tmp78:
	.loc	1 154 25                        // 01-attention-forward.py:154:25 @[ 01-attention-forward.py:524:37 ]
	shl.b32 	%r293, %r289, 13;
	add.s32 	%r266, %r4852, %r293;
	.loc	1 155 38                        // 01-attention-forward.py:155:38 @[ 01-attention-forward.py:524:37 ]
	shl.b32 	%r294, %r289, 3;
	add.s32 	%r265, %r286, %r294;
	.loc	1 156 38                        // 01-attention-forward.py:156:38 @[ 01-attention-forward.py:524:37 ]
	add.s32 	%r263, %r287, %r294;
	.loc	1 158 29                        // 01-attention-forward.py:158:29 @[ 01-attention-forward.py:524:37 ]
	// begin inline asm
	
{
	@!%p13 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r263], %r264;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
	.loc	1 146 25                        // 01-attention-forward.py:146:25 @[ 01-attention-forward.py:524:37 ]
	add.s32 	%r295, %r289, 1;
	.loc	1 147 29                        // 01-attention-forward.py:147:29 @[ 01-attention-forward.py:524:37 ]
	setp.eq.s32 	%p27, %r295, 8;
	.loc	1 148 34                        // 01-attention-forward.py:148:34 @[ 01-attention-forward.py:524:37 ]
	selp.b32 	%r4912, 0, %r295, %p27;
	.loc	1 149 42                        // 01-attention-forward.py:149:42 @[ 01-attention-forward.py:524:37 ]
	selp.b32 	%r296, 1, 0, %p27;
	xor.b32 	%r4911, %r264, %r296;
$L__tmp79:
	.loc	1 247 25                        // 01-attention-forward.py:247:25 @[ 01-attention-forward.py:525:52 ]
	// begin inline asm
	@%p14 mbarrier.arrive.expect_tx.shared.b64 _, [%r265], 8192;
	// end inline asm
	.loc	1 248 60                        // 01-attention-forward.py:248:60 @[ 01-attention-forward.py:525:52 ]
	bar.warp.sync 	-1;
	elect.sync 	%r297|%p24, -1;
	// begin inline asm
	@%p24 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [%r266], [%rd2, {%r246, %r254}], [%r265];
	// end inline asm
$L__tmp80:
	.loc	1 527 54                        // 01-attention-forward.py:527:54
	@%p25 bra 	$L__BB0_31;
// %bb.29:                              // %.lr.ph847.preheader
                                        //   in Loop: Header=BB0_28 Depth=2
	.loc	1 0 54                          // 01-attention-forward.py:0:54
	mov.b32 	%r4910, 128;
$L__BB0_30:                             // %.lr.ph847
                                        //   Parent Loop BB0_2 Depth=1
                                        //     Parent Loop BB0_28 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
$L__tmp81:
	.loc	1 154 25                        // 01-attention-forward.py:154:25 @[ 01-attention-forward.py:529:41 ]
	add.s32 	%r304, %r254, %r4910;
	shl.b32 	%r313, %r4912, 13;
	add.s32 	%r302, %r4852, %r313;
	.loc	1 155 38                        // 01-attention-forward.py:155:38 @[ 01-attention-forward.py:529:41 ]
	shl.b32 	%r315, %r4912, 3;
	add.s32 	%r301, %r286, %r315;
	.loc	1 156 38                        // 01-attention-forward.py:156:38 @[ 01-attention-forward.py:529:41 ]
	add.s32 	%r299, %r287, %r315;
	mov.pred 	%p28, -1;
	.loc	1 158 29                        // 01-attention-forward.py:158:29 @[ 01-attention-forward.py:529:41 ]
	// begin inline asm
	
{
	@!%p28 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r299], %r4911;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
	.loc	1 146 25                        // 01-attention-forward.py:146:25 @[ 01-attention-forward.py:529:41 ]
	add.s32 	%r318, %r4912, 1;
	.loc	1 147 29                        // 01-attention-forward.py:147:29 @[ 01-attention-forward.py:529:41 ]
	setp.eq.s32 	%p34, %r318, 8;
	.loc	1 148 34                        // 01-attention-forward.py:148:34 @[ 01-attention-forward.py:529:41 ]
	selp.b32 	%r319, 0, %r318, %p34;
	.loc	1 149 42                        // 01-attention-forward.py:149:42 @[ 01-attention-forward.py:529:41 ]
	selp.b32 	%r320, 1, 0, %p34;
	xor.b32 	%r307, %r4911, %r320;
$L__tmp82:
	.loc	1 247 25                        // 01-attention-forward.py:247:25 @[ 01-attention-forward.py:530:56 ]
	bar.warp.sync 	-1;
	// begin inline asm
	@%p14 mbarrier.arrive.expect_tx.shared.b64 _, [%r301], 8192;
	// end inline asm
	.loc	1 248 60                        // 01-attention-forward.py:248:60 @[ 01-attention-forward.py:530:56 ]
	bar.warp.sync 	-1;
	elect.sync 	%r321|%p30, -1;
	mov.b32 	%r303, 0;
	// begin inline asm
	@%p30 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [%r302], [%rd3, {%r303, %r304}], [%r301];
	// end inline asm
$L__tmp83:
	.loc	1 154 25                        // 01-attention-forward.py:154:25 @[ 01-attention-forward.py:531:41 ]
	shl.b32 	%r322, %r319, 13;
	add.s32 	%r309, %r4852, %r322;
	.loc	1 155 38                        // 01-attention-forward.py:155:38 @[ 01-attention-forward.py:531:41 ]
	shl.b32 	%r323, %r319, 3;
	add.s32 	%r308, %r286, %r323;
	.loc	1 156 38                        // 01-attention-forward.py:156:38 @[ 01-attention-forward.py:531:41 ]
	add.s32 	%r306, %r287, %r323;
	.loc	1 158 29                        // 01-attention-forward.py:158:29 @[ 01-attention-forward.py:531:41 ]
	// begin inline asm
	
{
	@!%p28 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r306], %r307;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
	.loc	1 146 25                        // 01-attention-forward.py:146:25 @[ 01-attention-forward.py:531:41 ]
	add.s32 	%r324, %r319, 1;
	.loc	1 147 29                        // 01-attention-forward.py:147:29 @[ 01-attention-forward.py:531:41 ]
	setp.eq.s32 	%p35, %r324, 8;
	.loc	1 148 34                        // 01-attention-forward.py:148:34 @[ 01-attention-forward.py:531:41 ]
	selp.b32 	%r4912, 0, %r324, %p35;
	.loc	1 149 42                        // 01-attention-forward.py:149:42 @[ 01-attention-forward.py:531:41 ]
	selp.b32 	%r325, 1, 0, %p35;
	xor.b32 	%r4911, %r307, %r325;
$L__tmp84:
	.loc	1 247 25                        // 01-attention-forward.py:247:25 @[ 01-attention-forward.py:532:56 ]
	bar.warp.sync 	-1;
	// begin inline asm
	@%p14 mbarrier.arrive.expect_tx.shared.b64 _, [%r308], 8192;
	// end inline asm
	.loc	1 248 60                        // 01-attention-forward.py:248:60 @[ 01-attention-forward.py:532:56 ]
	bar.warp.sync 	-1;
	elect.sync 	%r326|%p33, -1;
	// begin inline asm
	@%p33 cp.async.bulk.tensor.2d.shared::cluster.global.mbarrier::complete_tx::bytes [%r309], [%rd2, {%r303, %r304}], [%r308];
	// end inline asm
$L__tmp85:
	.loc	1 527 54                        // 01-attention-forward.py:527:54
	add.s32 	%r4910, %r4910, 128;
	setp.lt.s32 	%p36, %r4910, %r199;
	@%p36 bra 	$L__BB0_30;
	bra.uni 	$L__BB0_31;
$L__BB0_32:                             // %._crit_edge852
                                        //   in Loop: Header=BB0_2 Depth=1
	.loc	1 0 54                          // 01-attention-forward.py:0:54
	// begin inline asm
	barrier.sync 1 ;
	// end inline asm
	setmaxnreg.inc.sync.aligned.u32 	80;
	bra.uni 	$L__BB0_2;
$L__BB0_11:                             // %._crit_edge894
                                        //   in Loop: Header=BB0_2 Depth=1
	// begin inline asm
	barrier.sync 1 ;
	// end inline asm
	setmaxnreg.dec.sync.aligned.u32 	80;
	bra.uni 	$L__BB0_2;
$L__BB0_12:                             //   in Loop: Header=BB0_2 Depth=1
	setmaxnreg.inc.sync.aligned.u32 	192;
	// begin inline asm
	barrier.sync 1 ;
	// end inline asm
$L__tmp86:
	.loc	1 158 29                        // 01-attention-forward.py:158:29 @[ 01-attention-forward.py:695:56 ]
	add.s32 	%r522, %r4852, 99056;
	mov.b32 	%r4878, 0;
	mov.pred 	%p128, -1;
	// begin inline asm
	
{
	@!%p128 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r522], %r4878;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
	.loc	1 370 30                        // 01-attention-forward.py:370:30 @[ 01-attention-forward.py:695:56 ]
	mov.u32 	%r4872, %ctaid.x;
	.loc	2 40 28                         // standard.py:40:28 @[ 01-attention-forward.py:695:56 ]
	shr.s32 	%r526, %r4855, 31;
	shr.u32 	%r527, %r526, 24;
	add.s32 	%r528, %r4855, %r527;
	shr.s32 	%r529, %r528, 8;
	.loc	1 374 28                        // 01-attention-forward.py:374:28 @[ 01-attention-forward.py:695:56 ]
	mul.lo.s32 	%r35, %r4856, %r529;
	.loc	1 655 63                        // 01-attention-forward.py:655:63 @[ 01-attention-forward.py:695:56 ]
	setp.ge.s32 	%p129, %r4872, %r35;
	@%p129 bra 	$L__BB0_18;
// %bb.13:                              // %.preheader826.lr.ph
                                        //   in Loop: Header=BB0_2 Depth=1
	.loc	1 0 63                          // 01-attention-forward.py:0:63
	ld.shared.b32 	%r32, [global_smem+98320];
	mul.f32 	%r678, %r196, 0f3FB8AA3B;
	add.s32 	%r533, %r1, -256;
	shr.u32 	%r36, %r533, 5;
	.loc	1 655 63                        // 01-attention-forward.py:655:63 @[ 01-attention-forward.py:695:56 ]
	add.s32 	%r38, %r32, 65;
	add.s32 	%r39, %r32, 66;
	mov.b32 	%r4879, 1;
	bra.uni 	$L__BB0_14;
$L__BB0_17:                             // %._crit_edge872
                                        //   in Loop: Header=BB0_14 Depth=2
	.loc	1 167 29                        // 01-attention-forward.py:167:29 @[ 01-attention-forward.py:695:56 ]
	// begin inline asm
	barrier.sync.aligned 3, 128 ;
	// end inline asm
	add.s32 	%r1872, %r4852, 98976;
	mov.pred 	%p139, -1;
	// begin inline asm
	
{
	@!%p139 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r1872], %r4878;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
	.loc	1 145 40                        // 01-attention-forward.py:145:40 @[ 01-attention-forward.py:695:56 ]
	xor.b32 	%r4878, %r4878, 1;
	.loc	1 675 23                        // 01-attention-forward.py:675:23 @[ 01-attention-forward.py:695:56 ]
	shfl.sync.idx.b32 	%r1883, %r36, 0, 31, -1;
	shr.u32 	%r1884, %r1883, 2;
	shl.b32 	%r1885, %r1883, 21;
	and.b32 	%r1886, %r1885, 6291456;
	add.s32 	%r1887, %r1884, %r38;
	add.s32 	%r1874, %r1887, %r1886;
	// begin inline asm
	@%p139 tcgen05.st.sync.aligned.32x32b.x1.b32 [%r1874 + 0], {%r4880};
	// end inline asm
	// begin inline asm
	tcgen05.wait::st.sync.aligned;
	// end inline asm
	// begin inline asm
	barrier.sync.aligned 3, 128 ;
	// end inline asm
	add.s32 	%r1888, %r1884, %r39;
	.loc	1 676 23                        // 01-attention-forward.py:676:23 @[ 01-attention-forward.py:695:56 ]
	add.s32 	%r1876, %r1888, %r1886;
	// begin inline asm
	@%p139 tcgen05.st.sync.aligned.32x32b.x1.b32 [%r1876 + 0], {%r4881};
	// end inline asm
	// begin inline asm
	tcgen05.wait::st.sync.aligned;
	// end inline asm
	// begin inline asm
	barrier.sync.aligned 3, 128 ;
	// end inline asm
	.loc	1 678 24                        // 01-attention-forward.py:678:24 @[ 01-attention-forward.py:695:56 ]
	// begin inline asm
	barrier.sync.aligned 3, 128 ;
	// end inline asm
	add.s32 	%r1878, %r4852, 99040;
	// begin inline asm
	@%p142 mbarrier.arrive.shared::cta.b64 _, [%r1878];
	// end inline asm
	.loc	1 158 29                        // 01-attention-forward.py:158:29 @[ 01-attention-forward.py:695:56 ]
	// begin inline asm
	barrier.sync.aligned 3, 128 ;
	// end inline asm
	// begin inline asm
	
{
	@!%p139 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r522], %r4879;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
	.loc	1 145 40                        // 01-attention-forward.py:145:40 @[ 01-attention-forward.py:695:56 ]
	xor.b32 	%r4879, %r4879, 1;
	.loc	1 681 24                        // 01-attention-forward.py:681:24 @[ 01-attention-forward.py:695:56 ]
	// begin inline asm
	barrier.sync.aligned 3, 128 ;
	// end inline asm
	add.s32 	%r1881, %r4852, 98992;
	// begin inline asm
	@%p142 mbarrier.arrive.shared::cta.b64 _, [%r1881];
	// end inline asm
	.loc	1 655 63                        // 01-attention-forward.py:655:63 @[ 01-attention-forward.py:695:56 ]
	add.s32 	%r4872, %r4872, 78;
	setp.lt.s32 	%p145, %r4872, %r35;
	@%p145 bra 	$L__BB0_14;
	bra.uni 	$L__BB0_18;
$L__BB0_14:                             // %.preheader826
                                        //   Parent Loop BB0_2 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_16 Depth 3
	.loc	1 0 63                          // 01-attention-forward.py:0:63
	mov.b32 	%r4881, 0f3F800000;
	mov.b32 	%r4880, 0fFF800000;
	setp.eq.s32 	%p142, %r4853, 0;
	.loc	1 603 33                        // 01-attention-forward.py:603:33 @[ 01-attention-forward.py:695:56 ]
	@%p148 bra 	$L__BB0_17;
// %bb.15:                              // %.lr.ph871.preheader
                                        //   in Loop: Header=BB0_14 Depth=2
	.loc	1 0 33                          // 01-attention-forward.py:0:33
	mov.b32 	%r4877, 0;
	mov.b32 	%r4874, 0fFF800000;
	mov.b32 	%r4881, 0f3F800000;
$L__BB0_16:                             // %.lr.ph871
                                        //   Parent Loop BB0_2 Depth=1
                                        //     Parent Loop BB0_14 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	.loc	1 167 29                        // 01-attention-forward.py:167:29 @[ 01-attention-forward.py:695:56 ]
	// begin inline asm
	barrier.sync.aligned 3, 128 ;
	// end inline asm
	add.s32 	%r539, %r4852, 98976;
	mov.pred 	%p131, -1;
	// begin inline asm
	
{
	@!%p131 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r539], %r4878;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
	.loc	1 145 40                        // 01-attention-forward.py:145:40 @[ 01-attention-forward.py:695:56 ]
	xor.b32 	%r4878, %r4878, 1;
	.loc	1 605 25                        // 01-attention-forward.py:605:25 @[ 01-attention-forward.py:695:56 ]
	shfl.sync.idx.b32 	%r1608, %r36, 0, 31, -1;
	shr.u32 	%r1609, %r1608, 2;
	shl.b32 	%r1610, %r1608, 21;
	and.b32 	%r1611, %r1610, 6291456;
	shl.b32 	%r1612, %r1609, 7;
	add.s32 	%r1613, %r1611, %r32;
	add.s32 	%r605, %r1613, %r1612;
	// begin inline asm
	tcgen05.ld.sync.aligned.32x32b.x64.b32 {%r676, %r677, %r682, %r683, %r688, %r689, %r694, %r695, %r700, %r701, %r706, %r707, %r712, %r713, %r718, %r719, %r724, %r725, %r730, %r731, %r736, %r737, %r742, %r743, %r748, %r749, %r754, %r755, %r760, %r761, %r766, %r767, %r772, %r773, %r778, %r779, %r784, %r785, %r790, %r791, %r796, %r797, %r802, %r803, %r808, %r809, %r814, %r815, %r820, %r821, %r826, %r827, %r832, %r833, %r838, %r839, %r844, %r845, %r850, %r851, %r856, %r857, %r862, %r863}, [%r605 + 0];
	// end inline asm
	// begin inline asm
	tcgen05.ld.sync.aligned.32x32b.x64.b32 {%r868, %r869, %r874, %r875, %r880, %r881, %r886, %r887, %r892, %r893, %r898, %r899, %r904, %r905, %r910, %r911, %r916, %r917, %r922, %r923, %r928, %r929, %r934, %r935, %r940, %r941, %r946, %r947, %r952, %r953, %r958, %r959, %r964, %r965, %r970, %r971, %r976, %r977, %r982, %r983, %r988, %r989, %r994, %r995, %r1000, %r1001, %r1006, %r1007, %r1012, %r1013, %r1018, %r1019, %r1024, %r1025, %r1030, %r1031, %r1036, %r1037, %r1042, %r1043, %r1048, %r1049, %r1054, %r1055}, [%r605 + 64];
	// end inline asm
	// begin inline asm
	tcgen05.wait::ld.sync.aligned;
	// end inline asm
	.loc	2 167 27                        // standard.py:167:27 @[ 01-attention-forward.py:695:56 ]
	max.f32 	%r1614, %r676, %r677;
	max.f32 	%r1615, %r1614, %r682;
	max.f32 	%r1616, %r1615, %r683;
	max.f32 	%r1617, %r1616, %r688;
	max.f32 	%r1618, %r1617, %r689;
	max.f32 	%r1619, %r1618, %r694;
	max.f32 	%r1620, %r1619, %r695;
	max.f32 	%r1621, %r1620, %r700;
	max.f32 	%r1622, %r1621, %r701;
	max.f32 	%r1623, %r1622, %r706;
	max.f32 	%r1624, %r1623, %r707;
	max.f32 	%r1625, %r1624, %r712;
	max.f32 	%r1626, %r1625, %r713;
	max.f32 	%r1627, %r1626, %r718;
	max.f32 	%r1628, %r1627, %r719;
	max.f32 	%r1629, %r1628, %r724;
	max.f32 	%r1630, %r1629, %r725;
	max.f32 	%r1631, %r1630, %r730;
	max.f32 	%r1632, %r1631, %r731;
	max.f32 	%r1633, %r1632, %r736;
	max.f32 	%r1634, %r1633, %r737;
	max.f32 	%r1635, %r1634, %r742;
	max.f32 	%r1636, %r1635, %r743;
	max.f32 	%r1637, %r1636, %r748;
	max.f32 	%r1638, %r1637, %r749;
	max.f32 	%r1639, %r1638, %r754;
	max.f32 	%r1640, %r1639, %r755;
	max.f32 	%r1641, %r1640, %r760;
	max.f32 	%r1642, %r1641, %r761;
	max.f32 	%r1643, %r1642, %r766;
	max.f32 	%r1644, %r1643, %r767;
	max.f32 	%r1645, %r1644, %r772;
	max.f32 	%r1646, %r1645, %r773;
	max.f32 	%r1647, %r1646, %r778;
	max.f32 	%r1648, %r1647, %r779;
	max.f32 	%r1649, %r1648, %r784;
	max.f32 	%r1650, %r1649, %r785;
	max.f32 	%r1651, %r1650, %r790;
	max.f32 	%r1652, %r1651, %r791;
	max.f32 	%r1653, %r1652, %r796;
	max.f32 	%r1654, %r1653, %r797;
	max.f32 	%r1655, %r1654, %r802;
	max.f32 	%r1656, %r1655, %r803;
	max.f32 	%r1657, %r1656, %r808;
	max.f32 	%r1658, %r1657, %r809;
	max.f32 	%r1659, %r1658, %r814;
	max.f32 	%r1660, %r1659, %r815;
	max.f32 	%r1661, %r1660, %r820;
	max.f32 	%r1662, %r1661, %r821;
	max.f32 	%r1663, %r1662, %r826;
	max.f32 	%r1664, %r1663, %r827;
	max.f32 	%r1665, %r1664, %r832;
	max.f32 	%r1666, %r1665, %r833;
	max.f32 	%r1667, %r1666, %r838;
	max.f32 	%r1668, %r1667, %r839;
	max.f32 	%r1669, %r1668, %r844;
	max.f32 	%r1670, %r1669, %r845;
	max.f32 	%r1671, %r1670, %r850;
	max.f32 	%r1672, %r1671, %r851;
	max.f32 	%r1673, %r1672, %r856;
	max.f32 	%r1674, %r1673, %r857;
	max.f32 	%r1675, %r1674, %r862;
	max.f32 	%r1676, %r1675, %r863;
	max.f32 	%r1677, %r1676, %r868;
	max.f32 	%r1678, %r1677, %r869;
	max.f32 	%r1679, %r1678, %r874;
	max.f32 	%r1680, %r1679, %r875;
	max.f32 	%r1681, %r1680, %r880;
	max.f32 	%r1682, %r1681, %r881;
	max.f32 	%r1683, %r1682, %r886;
	max.f32 	%r1684, %r1683, %r887;
	max.f32 	%r1685, %r1684, %r892;
	max.f32 	%r1686, %r1685, %r893;
	max.f32 	%r1687, %r1686, %r898;
	max.f32 	%r1688, %r1687, %r899;
	max.f32 	%r1689, %r1688, %r904;
	max.f32 	%r1690, %r1689, %r905;
	max.f32 	%r1691, %r1690, %r910;
	max.f32 	%r1692, %r1691, %r911;
	max.f32 	%r1693, %r1692, %r916;
	max.f32 	%r1694, %r1693, %r917;
	max.f32 	%r1695, %r1694, %r922;
	max.f32 	%r1696, %r1695, %r923;
	max.f32 	%r1697, %r1696, %r928;
	max.f32 	%r1698, %r1697, %r929;
	max.f32 	%r1699, %r1698, %r934;
	max.f32 	%r1700, %r1699, %r935;
	max.f32 	%r1701, %r1700, %r940;
	max.f32 	%r1702, %r1701, %r941;
	max.f32 	%r1703, %r1702, %r946;
	max.f32 	%r1704, %r1703, %r947;
	max.f32 	%r1705, %r1704, %r952;
	max.f32 	%r1706, %r1705, %r953;
	max.f32 	%r1707, %r1706, %r958;
	max.f32 	%r1708, %r1707, %r959;
	max.f32 	%r1709, %r1708, %r964;
	max.f32 	%r1710, %r1709, %r965;
	max.f32 	%r1711, %r1710, %r970;
	max.f32 	%r1712, %r1711, %r971;
	max.f32 	%r1713, %r1712, %r976;
	max.f32 	%r1714, %r1713, %r977;
	max.f32 	%r1715, %r1714, %r982;
	max.f32 	%r1716, %r1715, %r983;
	max.f32 	%r1717, %r1716, %r988;
	max.f32 	%r1718, %r1717, %r989;
	max.f32 	%r1719, %r1718, %r994;
	max.f32 	%r1720, %r1719, %r995;
	max.f32 	%r1721, %r1720, %r1000;
	max.f32 	%r1722, %r1721, %r1001;
	max.f32 	%r1723, %r1722, %r1006;
	max.f32 	%r1724, %r1723, %r1007;
	max.f32 	%r1725, %r1724, %r1012;
	max.f32 	%r1726, %r1725, %r1013;
	max.f32 	%r1727, %r1726, %r1018;
	max.f32 	%r1728, %r1727, %r1019;
	max.f32 	%r1729, %r1728, %r1024;
	max.f32 	%r1730, %r1729, %r1025;
	max.f32 	%r1731, %r1730, %r1030;
	max.f32 	%r1732, %r1731, %r1031;
	max.f32 	%r1733, %r1732, %r1036;
	max.f32 	%r1734, %r1733, %r1037;
	max.f32 	%r1735, %r1734, %r1042;
	max.f32 	%r1736, %r1735, %r1043;
	max.f32 	%r1737, %r1736, %r1048;
	max.f32 	%r1738, %r1737, %r1049;
	max.f32 	%r1739, %r1738, %r1054;
	max.f32 	%r1740, %r1739, %r1055;
	.loc	1 613 47                        // 01-attention-forward.py:613:47 @[ 01-attention-forward.py:695:56 ]
	mul.f32 	%r1741, %r678, %r1740;
	.loc	1 613 31                        // 01-attention-forward.py:613:31 @[ 01-attention-forward.py:695:56 ]
	max.f32 	%r4880, %r4874, %r1741;
	.loc	1 614 30                        // 01-attention-forward.py:614:30 @[ 01-attention-forward.py:695:56 ]
	sub.f32 	%r1742, %r4874, %r4880;
	.loc	1 614 24                        // 01-attention-forward.py:614:24 @[ 01-attention-forward.py:695:56 ]
	ex2.approx.ftz.f32 	%r672, %r1742;
	add.s32 	%r1743, %r1613, %r1609;
	.loc	1 617 25                        // 01-attention-forward.py:617:25 @[ 01-attention-forward.py:695:56 ]
	add.s32 	%r671, %r1743, 64;
	// begin inline asm
	@%p131 tcgen05.st.sync.aligned.32x32b.x1.b32 [%r671 + 0], {%r672};
	// end inline asm
	// begin inline asm
	tcgen05.wait::st.sync.aligned;
	// end inline asm
	// begin inline asm
	barrier.sync.aligned 3, 128 ;
	// end inline asm
	.loc	1 618 24                        // 01-attention-forward.py:618:24 @[ 01-attention-forward.py:695:56 ]
	// begin inline asm
	barrier.sync.aligned 3, 128 ;
	// end inline asm
	add.s32 	%r673, %r4852, 99040;
	// begin inline asm
	@%p142 mbarrier.arrive.shared::cta.b64 _, [%r673];
	// end inline asm
	.loc	1 464 8                         // 01-attention-forward.py:464:8 @[ 01-attention-forward.py:695:56 ]
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r676, %r677 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r674, %r675 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r682, %r683 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r680, %r681 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r688, %r689 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r686, %r687 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r694, %r695 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r692, %r693 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r700, %r701 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r698, %r699 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r706, %r707 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r704, %r705 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r712, %r713 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r710, %r711 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r718, %r719 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r716, %r717 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r724, %r725 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r722, %r723 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r730, %r731 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r728, %r729 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r736, %r737 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r734, %r735 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r742, %r743 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r740, %r741 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r748, %r749 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r746, %r747 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r754, %r755 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r752, %r753 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r760, %r761 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r758, %r759 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r766, %r767 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r764, %r765 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r772, %r773 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r770, %r771 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r778, %r779 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r776, %r777 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r784, %r785 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r782, %r783 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r790, %r791 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r788, %r789 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r796, %r797 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r794, %r795 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r802, %r803 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r800, %r801 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r808, %r809 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r806, %r807 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r814, %r815 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r812, %r813 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r820, %r821 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r818, %r819 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r826, %r827 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r824, %r825 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r832, %r833 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r830, %r831 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r838, %r839 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r836, %r837 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r844, %r845 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r842, %r843 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r850, %r851 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r848, %r849 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r856, %r857 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r854, %r855 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r862, %r863 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r860, %r861 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r868, %r869 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r866, %r867 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r874, %r875 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r872, %r873 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r880, %r881 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r878, %r879 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r886, %r887 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r884, %r885 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r892, %r893 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r890, %r891 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r898, %r899 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r896, %r897 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r904, %r905 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r902, %r903 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r910, %r911 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r908, %r909 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r916, %r917 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r914, %r915 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r922, %r923 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r920, %r921 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r928, %r929 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r926, %r927 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r934, %r935 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r932, %r933 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r940, %r941 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r938, %r939 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r946, %r947 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r944, %r945 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r952, %r953 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r950, %r951 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r958, %r959 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r956, %r957 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r964, %r965 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r962, %r963 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r970, %r971 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r968, %r969 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r976, %r977 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r974, %r975 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r982, %r983 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r980, %r981 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r988, %r989 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r986, %r987 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r994, %r995 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r992, %r993 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r1000, %r1001 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r998, %r999 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r1006, %r1007 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r1004, %r1005 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r1012, %r1013 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r1010, %r1011 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r1018, %r1019 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r1016, %r1017 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r1024, %r1025 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r1022, %r1023 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r1030, %r1031 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r1028, %r1029 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r1036, %r1037 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r1034, %r1035 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r1042, %r1043 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r1040, %r1041 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r1048, %r1049 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r1046, %r1047 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r1054, %r1055 };
            mov.b64 rb, { %r678, %r678 };
            mul.f32x2 rc, ra, rb;
            mov.b64 { %r1052, %r1053 }, rc;
        }
        
	// end inline asm
	mov.b32 	%r1744, 0f00000000;
	.loc	1 621 29                        // 01-attention-forward.py:621:29 @[ 01-attention-forward.py:695:56 ]
	sub.f32 	%r1063, %r1744, %r4880;
	.loc	1 444 8                         // 01-attention-forward.py:444:8 @[ 01-attention-forward.py:695:56 ]
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r674, %r675 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1058, %r1059 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r680, %r681 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1064, %r1065 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r686, %r687 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1070, %r1071 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r692, %r693 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1076, %r1077 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r698, %r699 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1082, %r1083 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r704, %r705 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1088, %r1089 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r710, %r711 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1094, %r1095 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r716, %r717 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1100, %r1101 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r722, %r723 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1106, %r1107 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r728, %r729 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1112, %r1113 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r734, %r735 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1118, %r1119 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r740, %r741 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1124, %r1125 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r746, %r747 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1130, %r1131 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r752, %r753 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1136, %r1137 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r758, %r759 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1142, %r1143 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r764, %r765 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1148, %r1149 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r770, %r771 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1154, %r1155 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r776, %r777 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1160, %r1161 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r782, %r783 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1166, %r1167 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r788, %r789 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1172, %r1173 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r794, %r795 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1178, %r1179 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r800, %r801 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1184, %r1185 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r806, %r807 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1190, %r1191 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r812, %r813 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1196, %r1197 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r818, %r819 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1202, %r1203 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r824, %r825 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1208, %r1209 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r830, %r831 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1214, %r1215 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r836, %r837 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1220, %r1221 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r842, %r843 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1226, %r1227 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r848, %r849 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1232, %r1233 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r854, %r855 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1238, %r1239 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r860, %r861 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1244, %r1245 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r866, %r867 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1250, %r1251 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r872, %r873 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1256, %r1257 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r878, %r879 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1262, %r1263 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r884, %r885 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1268, %r1269 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r890, %r891 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1274, %r1275 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r896, %r897 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1280, %r1281 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r902, %r903 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1286, %r1287 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r908, %r909 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1292, %r1293 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r914, %r915 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1298, %r1299 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r920, %r921 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1304, %r1305 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r926, %r927 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1310, %r1311 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r932, %r933 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1316, %r1317 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r938, %r939 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1322, %r1323 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r944, %r945 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1328, %r1329 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r950, %r951 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1334, %r1335 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r956, %r957 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1340, %r1341 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r962, %r963 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1346, %r1347 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r968, %r969 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1352, %r1353 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r974, %r975 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1358, %r1359 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r980, %r981 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1364, %r1365 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r986, %r987 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1370, %r1371 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r992, %r993 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1376, %r1377 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r998, %r999 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1382, %r1383 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r1004, %r1005 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1388, %r1389 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r1010, %r1011 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1394, %r1395 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r1016, %r1017 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1400, %r1401 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r1022, %r1023 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1406, %r1407 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r1028, %r1029 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1412, %r1413 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r1034, %r1035 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1418, %r1419 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r1040, %r1041 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1424, %r1425 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r1046, %r1047 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1430, %r1431 }, rc;
        }
        
	// end inline asm
	// begin inline asm
	
        {
            .reg .b64 ra, rb, rc;
            mov.b64 ra, { %r1052, %r1053 };
            mov.b64 rb, { %r1063, %r1063 };
            add.f32x2 rc, ra, rb;
            mov.b64 { %r1436, %r1437 }, rc;
        }
        
	// end inline asm
	.loc	1 625 21                        // 01-attention-forward.py:625:21 @[ 01-attention-forward.py:695:56 ]
	ex2.approx.ftz.f32 	%r1442, %r1058;
	ex2.approx.ftz.f32 	%r1443, %r1059;
	ex2.approx.ftz.f32 	%r1444, %r1064;
	ex2.approx.ftz.f32 	%r1445, %r1065;
	ex2.approx.ftz.f32 	%r1446, %r1070;
	ex2.approx.ftz.f32 	%r1447, %r1071;
	ex2.approx.ftz.f32 	%r1448, %r1076;
	ex2.approx.ftz.f32 	%r1449, %r1077;
	ex2.approx.ftz.f32 	%r1450, %r1082;
	ex2.approx.ftz.f32 	%r1451, %r1083;
	ex2.approx.ftz.f32 	%r1452, %r1088;
	ex2.approx.ftz.f32 	%r1453, %r1089;
	ex2.approx.ftz.f32 	%r1454, %r1094;
	ex2.approx.ftz.f32 	%r1455, %r1095;
	ex2.approx.ftz.f32 	%r1456, %r1100;
	ex2.approx.ftz.f32 	%r1457, %r1101;
	ex2.approx.ftz.f32 	%r1458, %r1106;
	ex2.approx.ftz.f32 	%r1459, %r1107;
	ex2.approx.ftz.f32 	%r1460, %r1112;
	ex2.approx.ftz.f32 	%r1461, %r1113;
	ex2.approx.ftz.f32 	%r1462, %r1118;
	ex2.approx.ftz.f32 	%r1463, %r1119;
	ex2.approx.ftz.f32 	%r1464, %r1124;
	ex2.approx.ftz.f32 	%r1465, %r1125;
	ex2.approx.ftz.f32 	%r1466, %r1130;
	ex2.approx.ftz.f32 	%r1467, %r1131;
	ex2.approx.ftz.f32 	%r1468, %r1136;
	ex2.approx.ftz.f32 	%r1469, %r1137;
	ex2.approx.ftz.f32 	%r1470, %r1142;
	ex2.approx.ftz.f32 	%r1471, %r1143;
	ex2.approx.ftz.f32 	%r1472, %r1148;
	ex2.approx.ftz.f32 	%r1473, %r1149;
	ex2.approx.ftz.f32 	%r1474, %r1154;
	ex2.approx.ftz.f32 	%r1475, %r1155;
	ex2.approx.ftz.f32 	%r1476, %r1160;
	ex2.approx.ftz.f32 	%r1477, %r1161;
	ex2.approx.ftz.f32 	%r1478, %r1166;
	ex2.approx.ftz.f32 	%r1479, %r1167;
	ex2.approx.ftz.f32 	%r1480, %r1172;
	ex2.approx.ftz.f32 	%r1481, %r1173;
	ex2.approx.ftz.f32 	%r1482, %r1178;
	ex2.approx.ftz.f32 	%r1483, %r1179;
	ex2.approx.ftz.f32 	%r1484, %r1184;
	ex2.approx.ftz.f32 	%r1485, %r1185;
	ex2.approx.ftz.f32 	%r1486, %r1190;
	ex2.approx.ftz.f32 	%r1487, %r1191;
	ex2.approx.ftz.f32 	%r1488, %r1196;
	ex2.approx.ftz.f32 	%r1489, %r1197;
	ex2.approx.ftz.f32 	%r1490, %r1202;
	ex2.approx.ftz.f32 	%r1491, %r1203;
	ex2.approx.ftz.f32 	%r1492, %r1208;
	ex2.approx.ftz.f32 	%r1493, %r1209;
	ex2.approx.ftz.f32 	%r1494, %r1214;
	ex2.approx.ftz.f32 	%r1495, %r1215;
	ex2.approx.ftz.f32 	%r1496, %r1220;
	ex2.approx.ftz.f32 	%r1497, %r1221;
	ex2.approx.ftz.f32 	%r1498, %r1226;
	ex2.approx.ftz.f32 	%r1499, %r1227;
	ex2.approx.ftz.f32 	%r1500, %r1232;
	ex2.approx.ftz.f32 	%r1501, %r1233;
	ex2.approx.ftz.f32 	%r1502, %r1238;
	ex2.approx.ftz.f32 	%r1503, %r1239;
	ex2.approx.ftz.f32 	%r1504, %r1244;
	ex2.approx.ftz.f32 	%r1505, %r1245;
	.loc	1 626 57                        // 01-attention-forward.py:626:57 @[ 01-attention-forward.py:695:56 ]
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs1, %r1443, %r1442; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs2, %r1445, %r1444; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs3, %r1447, %r1446; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs4, %r1449, %r1448; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs5, %r1451, %r1450; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs6, %r1453, %r1452; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs7, %r1455, %r1454; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs8, %r1457, %r1456; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs9, %r1459, %r1458; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs10, %r1461, %r1460; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs11, %r1463, %r1462; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs12, %r1465, %r1464; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs13, %r1467, %r1466; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs14, %r1469, %r1468; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs15, %r1471, %r1470; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs16, %r1473, %r1472; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs17, %r1475, %r1474; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs18, %r1477, %r1476; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs19, %r1479, %r1478; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs20, %r1481, %r1480; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs21, %r1483, %r1482; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs22, %r1485, %r1484; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs23, %r1487, %r1486; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs24, %r1489, %r1488; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs25, %r1491, %r1490; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs26, %r1493, %r1492; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs27, %r1495, %r1494; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs28, %r1497, %r1496; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs29, %r1499, %r1498; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs30, %r1501, %r1500; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs31, %r1503, %r1502; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs32, %r1505, %r1504; 

	// end inline asm
	.loc	1 626 51                        // 01-attention-forward.py:626:51 @[ 01-attention-forward.py:695:56 ]
	mov.b32 	%r1507, {%rs1, %rs2};
	mov.b32 	%r1508, {%rs3, %rs4};
	mov.b32 	%r1509, {%rs5, %rs6};
	mov.b32 	%r1510, {%rs7, %rs8};
	mov.b32 	%r1511, {%rs9, %rs10};
	mov.b32 	%r1512, {%rs11, %rs12};
	mov.b32 	%r1513, {%rs13, %rs14};
	mov.b32 	%r1514, {%rs15, %rs16};
	mov.b32 	%r1515, {%rs17, %rs18};
	mov.b32 	%r1516, {%rs19, %rs20};
	mov.b32 	%r1517, {%rs21, %rs22};
	mov.b32 	%r1518, {%rs23, %rs24};
	mov.b32 	%r1519, {%rs25, %rs26};
	mov.b32 	%r1520, {%rs27, %rs28};
	mov.b32 	%r1521, {%rs29, %rs30};
	mov.b32 	%r1522, {%rs31, %rs32};
	mad.lo.s32 	%r1506, %r1609, -112, %r605;
	// begin inline asm
	@%p131 tcgen05.st.sync.aligned.32x32b.x16.b32 [%r1506 + 0], {%r1507, %r1508, %r1509, %r1510, %r1511, %r1512, %r1513, %r1514, %r1515, %r1516, %r1517, %r1518, %r1519, %r1520, %r1521, %r1522};
	// end inline asm
	// begin inline asm
	tcgen05.wait::st.sync.aligned;
	// end inline asm
	// begin inline asm
	barrier.sync.aligned 3, 128 ;
	// end inline asm
	.loc	1 627 21                        // 01-attention-forward.py:627:21 @[ 01-attention-forward.py:695:56 ]
	ex2.approx.ftz.f32 	%r1523, %r1250;
	ex2.approx.ftz.f32 	%r1524, %r1251;
	ex2.approx.ftz.f32 	%r1525, %r1256;
	ex2.approx.ftz.f32 	%r1526, %r1257;
	ex2.approx.ftz.f32 	%r1527, %r1262;
	ex2.approx.ftz.f32 	%r1528, %r1263;
	ex2.approx.ftz.f32 	%r1529, %r1268;
	ex2.approx.ftz.f32 	%r1530, %r1269;
	ex2.approx.ftz.f32 	%r1531, %r1274;
	ex2.approx.ftz.f32 	%r1532, %r1275;
	ex2.approx.ftz.f32 	%r1533, %r1280;
	ex2.approx.ftz.f32 	%r1534, %r1281;
	ex2.approx.ftz.f32 	%r1535, %r1286;
	ex2.approx.ftz.f32 	%r1536, %r1287;
	ex2.approx.ftz.f32 	%r1537, %r1292;
	ex2.approx.ftz.f32 	%r1538, %r1293;
	ex2.approx.ftz.f32 	%r1539, %r1298;
	ex2.approx.ftz.f32 	%r1540, %r1299;
	ex2.approx.ftz.f32 	%r1541, %r1304;
	ex2.approx.ftz.f32 	%r1542, %r1305;
	ex2.approx.ftz.f32 	%r1543, %r1310;
	ex2.approx.ftz.f32 	%r1544, %r1311;
	ex2.approx.ftz.f32 	%r1545, %r1316;
	ex2.approx.ftz.f32 	%r1546, %r1317;
	ex2.approx.ftz.f32 	%r1547, %r1322;
	ex2.approx.ftz.f32 	%r1548, %r1323;
	ex2.approx.ftz.f32 	%r1549, %r1328;
	ex2.approx.ftz.f32 	%r1550, %r1329;
	ex2.approx.ftz.f32 	%r1551, %r1334;
	ex2.approx.ftz.f32 	%r1552, %r1335;
	ex2.approx.ftz.f32 	%r1553, %r1340;
	ex2.approx.ftz.f32 	%r1554, %r1341;
	ex2.approx.ftz.f32 	%r1555, %r1346;
	ex2.approx.ftz.f32 	%r1556, %r1347;
	ex2.approx.ftz.f32 	%r1557, %r1352;
	ex2.approx.ftz.f32 	%r1558, %r1353;
	ex2.approx.ftz.f32 	%r1559, %r1358;
	ex2.approx.ftz.f32 	%r1560, %r1359;
	ex2.approx.ftz.f32 	%r1561, %r1364;
	ex2.approx.ftz.f32 	%r1562, %r1365;
	ex2.approx.ftz.f32 	%r1563, %r1370;
	ex2.approx.ftz.f32 	%r1564, %r1371;
	ex2.approx.ftz.f32 	%r1565, %r1376;
	ex2.approx.ftz.f32 	%r1566, %r1377;
	ex2.approx.ftz.f32 	%r1567, %r1382;
	ex2.approx.ftz.f32 	%r1568, %r1383;
	ex2.approx.ftz.f32 	%r1569, %r1388;
	ex2.approx.ftz.f32 	%r1570, %r1389;
	ex2.approx.ftz.f32 	%r1571, %r1394;
	ex2.approx.ftz.f32 	%r1572, %r1395;
	ex2.approx.ftz.f32 	%r1573, %r1400;
	ex2.approx.ftz.f32 	%r1574, %r1401;
	ex2.approx.ftz.f32 	%r1575, %r1406;
	ex2.approx.ftz.f32 	%r1576, %r1407;
	ex2.approx.ftz.f32 	%r1577, %r1412;
	ex2.approx.ftz.f32 	%r1578, %r1413;
	ex2.approx.ftz.f32 	%r1579, %r1418;
	ex2.approx.ftz.f32 	%r1580, %r1419;
	ex2.approx.ftz.f32 	%r1581, %r1424;
	ex2.approx.ftz.f32 	%r1582, %r1425;
	ex2.approx.ftz.f32 	%r1583, %r1430;
	ex2.approx.ftz.f32 	%r1584, %r1431;
	ex2.approx.ftz.f32 	%r1585, %r1436;
	ex2.approx.ftz.f32 	%r1586, %r1437;
	.loc	1 628 75                        // 01-attention-forward.py:628:75 @[ 01-attention-forward.py:695:56 ]
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs33, %r1524, %r1523; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs34, %r1526, %r1525; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs35, %r1528, %r1527; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs36, %r1530, %r1529; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs37, %r1532, %r1531; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs38, %r1534, %r1533; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs39, %r1536, %r1535; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs40, %r1538, %r1537; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs41, %r1540, %r1539; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs42, %r1542, %r1541; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs43, %r1544, %r1543; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs44, %r1546, %r1545; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs45, %r1548, %r1547; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs46, %r1550, %r1549; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs47, %r1552, %r1551; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs48, %r1554, %r1553; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs49, %r1556, %r1555; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs50, %r1558, %r1557; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs51, %r1560, %r1559; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs52, %r1562, %r1561; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs53, %r1564, %r1563; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs54, %r1566, %r1565; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs55, %r1568, %r1567; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs56, %r1570, %r1569; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs57, %r1572, %r1571; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs58, %r1574, %r1573; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs59, %r1576, %r1575; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs60, %r1578, %r1577; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs61, %r1580, %r1579; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs62, %r1582, %r1581; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs63, %r1584, %r1583; 

	// end inline asm
	// begin inline asm
	cvt.rn.satfinite.e5m2x2.f32 %rs64, %r1586, %r1585; 

	// end inline asm
	.loc	1 628 69                        // 01-attention-forward.py:628:69 @[ 01-attention-forward.py:695:56 ]
	mov.b32 	%r1588, {%rs33, %rs34};
	mov.b32 	%r1589, {%rs35, %rs36};
	mov.b32 	%r1590, {%rs37, %rs38};
	mov.b32 	%r1591, {%rs39, %rs40};
	mov.b32 	%r1592, {%rs41, %rs42};
	mov.b32 	%r1593, {%rs43, %rs44};
	mov.b32 	%r1594, {%rs45, %rs46};
	mov.b32 	%r1595, {%rs47, %rs48};
	mov.b32 	%r1596, {%rs49, %rs50};
	mov.b32 	%r1597, {%rs51, %rs52};
	mov.b32 	%r1598, {%rs53, %rs54};
	mov.b32 	%r1599, {%rs55, %rs56};
	mov.b32 	%r1600, {%rs57, %rs58};
	mov.b32 	%r1601, {%rs59, %rs60};
	mov.b32 	%r1602, {%rs61, %rs62};
	mov.b32 	%r1603, {%rs63, %rs64};
	add.s32 	%r1587, %r1506, 16;
	// begin inline asm
	@%p131 tcgen05.st.sync.aligned.32x32b.x16.b32 [%r1587 + 0], {%r1588, %r1589, %r1590, %r1591, %r1592, %r1593, %r1594, %r1595, %r1596, %r1597, %r1598, %r1599, %r1600, %r1601, %r1602, %r1603};
	// end inline asm
	// begin inline asm
	tcgen05.wait::st.sync.aligned;
	// end inline asm
	// begin inline asm
	barrier.sync.aligned 3, 128 ;
	// end inline asm
	.loc	1 629 24                        // 01-attention-forward.py:629:24 @[ 01-attention-forward.py:695:56 ]
	// begin inline asm
	barrier.sync.aligned 3, 128 ;
	// end inline asm
	add.s32 	%r1604, %r4852, 98992;
	// begin inline asm
	@%p142 mbarrier.arrive.shared::cta.b64 _, [%r1604];
	// end inline asm
	.loc	1 158 29                        // 01-attention-forward.py:158:29 @[ 01-attention-forward.py:695:56 ]
	// begin inline asm
	barrier.sync.aligned 3, 128 ;
	// end inline asm
	// begin inline asm
	
{
	@!%p131 bra.uni skipWait;
	.reg .pred complete;
	waitLoop:
	mbarrier.try_wait.parity.shared.b64 complete, [%r522], %r4879;
	@!complete bra.uni waitLoop;
	skipWait:
}

	// end inline asm
	.loc	1 145 40                        // 01-attention-forward.py:145:40 @[ 01-attention-forward.py:695:56 ]
	xor.b32 	%r4879, %r4879, 1;
	.loc	2 260 15                        // standard.py:260:15 @[ 01-attention-forward.py:695:56 ]
	add.f32 	%r1745, %r1442, %r1443;
	add.f32 	%r1746, %r1745, %r1444;
	add.f32 	%r1747, %r1746, %r1445;
	add.f32 	%r1748, %r1747, %r1446;
	add.f32 	%r1749, %r1748, %r1447;
	add.f32 	%r1750, %r1749, %r1448;
	add.f32 	%r1751, %r1750, %r1449;
	add.f32 	%r1752, %r1751, %r1450;
	add.f32 	%r1753, %r1752, %r1451;
	add.f32 	%r1754, %r1753, %r1452;
	add.f32 	%r1755, %r1754, %r1453;
	add.f32 	%r1756, %r1755, %r1454;
	add.f32 	%r1757, %r1756, %r1455;
	add.f32 	%r1758, %r1757, %r1456;
	add.f32 	%r1759, %r1758, %r1457;
	add.f32 	%r1760, %r1759, %r1458;
	add.f32 	%r1761, %r1760, %r1459;
	add.f32 	%r1762, %r1761, %r1460;
	add.f32 	%r1763, %r1762, %r1461;
	add.f32 	%r1764, %r1763, %r1462;
	add.f32 	%r1765, %r1764, %r1463;
	add.f32 	%r1766, %r1765, %r1464;
	add.f32 	%r1767, %r1766, %r1465;
	add.f32 	%r1768, %r1767, %r1466;
	add.f32 	%r1769, %r1768, %r1467;
	add.f32 	%r1770, %r1769, %r1468;
	add.f32 	%r1771, %r1770, %r1469;
	add.f32 	%r1772, %r1771, %r1470;
	add.f32 	%r1773, %r1772, %r1471;
	add.f32 	%r1774, %r1773, %r1472;
	add.f32 	%r1775, %r1774, %r1473;
	add.f32 	%r1776, %r1775, %r1474;
	add.f32 	%r1777, %r1776, %r1475;
	add.f32 	%r1778, %r1777, %r1476;
	add.f32 	%r1779, %r1778, %r1477;
	add.f32 	%r1780, %r1779, %r1478;
	add.f32 	%r1781, %r1780, %r1479;
	add.f32 	%r1782, %r1781, %r1480;
	add.f32 	%r1783, %r1782, %r1481;
	add.f32 	%r1784, %r1783, %r1482;
	add.f32 	%r1785, %r1784, %r1483;
	add.f32 	%r1786, %r1785, %r1484;
	add.f32 	%r1787, %r1786, %r1485;
	add.f32 	%r1788, %r1787, %r1486;
	add.f32 	%r1789, %r1788, %r1487;
	add.f32 	%r1790, %r1789, %r1488;
	add.f32 	%r1791, %r1790, %r1489;
	add.f32 	%r1792, %r1791, %r1490;
	add.f32 	%r1793, %r1792, %r1491;
	add.f32 	%r1794, %r1793, %r1492;
	add.f32 	%r1795, %r1794, %r1493;
	add.f32 	%r1796, %r1795, %r1494;
	add.f32 	%r1797, %r1796, %r1495;
	add.f32 	%r1798, %r1797, %r1496;
	add.f32 	%r1799, %r1798, %r1497;
	add.f32 	%r1800, %r1799, %r1498;
	add.f32 	%r1801, %r1800, %r1499;
	add.f32 	%r1802, %r1801, %r1500;
	add.f32 	%r1803, %r1802, %r1501;
	add.f32 	%r1804, %r1803, %r1502;
	add.f32 	%r1805, %r1804, %r1503;
	add.f32 	%r1806, %r1805, %r1504;
	add.f32 	%r1807, %r1806, %r1505;
	add.f32 	%r1808, %r1807, %r1523;
	add.f32 	%r1809, %r1808, %r1524;
	add.f32 	%r1810, %r1809, %r1525;
	add.f32 	%r1811, %r1810, %r1526;
	add.f32 	%r1812, %r1811, %r1527;
	add.f32 	%r1813, %r1812, %r1528;
	add.f32 	%r1814, %r1813, %r1529;
	add.f32 	%r1815, %r1814, %r1530;
	add.f32 	%r1816, %r1815, %r1531;
	add.f32 	%r1817, %r1816, %r1532;
	add.f32 	%r1818, %r1817, %r1533;
	add.f32 	%r1819, %r1818, %r1534;
	add.f32 	%r1820, %r1819, %r1535;
	add.f32 	%r1821, %r1820, %r1536;
	add.f32 	%r1822, %r1821, %r1537;
	add.f32 	%r1823, %r1822, %r1538;
	add.f32 	%r1824, %r1823, %r1539;
	add.f32 	%r1825, %r1824, %r1540;
	add.f32 	%r1826, %r1825, %r1541;
	add.f32 	%r1827, %r1826, %r1542;
	add.f32 	%r1828, %r1827, %r1543;
	add.f32 	%r1829, %r1828, %r1544;
	add.f32 	%r1830, %r1829, %r1545;
	add.f32 	%r1831, %r1830, %r1546;
	add.f32 	%r1832, %r1831, %r1547;
	add.f32 	%r1833, %r1832, %r1548;
	add.f32 	%r1834, %r1833, %r1549;
	add.f32 	%r1835, %r1834, %r1550;
	add.f32 	%r1836, %r1835, %r1551;
	add.f32 	%r1837, %r1836, %r1552;
	add.f32 	%r1838, %r1837, %r1553;
	add.f32 	%r1839, %r1838, %r1554;
	add.f32 	%r1840, %r1839, %r1555;
	add.f32 	%r1841, %r1840, %r1556;
	add.f32 	%r1842, %r1841, %r1557;
	add.f32 	%r1843, %r1842, %r1558;
	add.f32 	%r1844, %r1843, %r1559;
	add.f32 	%r1845, %r1844, %r1560;
	add.f32 	%r1846, %r1845, %r1561;
	add.f32 	%r1847, %r1846, %r1562;
	add.f32 	%r1848, %r1847, %r1563;
	add.f32 	%r1849, %r1848, %r1564;
	add.f32 	%r1850, %r1849, %r1565;
	add.f32 	%r1851, %r1850, %r1566;
	add.f32 	%r1852, %r1851, %r1567;
	add.f32 	%r1853, %r1852, %r1568;
	add.f32 	%r1854, %r1853, %r1569;
	add.f32 	%r1855, %r1854, %r1570;
	add.f32 	%r1856, %r1855, %r1571;
	add.f32 	%r1857, %r1856, %r1572;
	add.f32 	%r1858, %r1857, %r1573;
	add.f32 	%r1859, %r1858, %r1574;
	add.f32 	%r1860, %r1859, %r1575;
	add.f32 	%r1861, %r1860, %r1576;
	add.f32 	%r1862, %r1861, %r1577;
	add.f32 	%r1863, %r1862, %r1578;
	add.f32 	%r1864, %r1863, %r1579;
	add.f32 	%r1865, %r1864, %r1580;
	add.f32 	%r1866, %r1865, %r1581;
	add.f32 	%r1867, %r1866, %r1582;
	add.f32 	%r1868, %r1867, %r1583;
	add.f32 	%r1869, %r1868, %r1584;
	add.f32 	%r1870, %r1869, %r1585;
	add.f32 	%r1871, %r1870, %r1586;
	.loc	1 636 28                        // 01-attention-forward.py:636:28 @[ 01-attention-forward.py:695:56 ]
	fma.rn.f32 	%r4881, %r4881, %r672, %r1871;
	.loc	1 603 33                        // 01-attention-forward.py:603:33 @[ 01-attention-forward.py:695:56 ]
	add.s32 	%r4877, %r4877, 128;
	setp.lt.s32 	%p138, %r4877, %r199;
	mov.b32 	%r4874, %r4880;
	@%p138 bra 	$L__BB0_16;
	bra.uni 	$L__BB0_17;
$L__tmp87:
$L__BB0_18:                             // %._crit_edge879
                                        //   in Loop: Header=BB0_2 Depth=1
	.loc	1 0 33                          // 01-attention-forward.py:0:33
	// begin inline asm
	barrier.sync 1 ;
	// end inline asm
	setmaxnreg.dec.sync.aligned.u32 	80;
	bra.uni 	$L__BB0_2;
$L__BB0_37:                             //   in Loop: Header=BB0_2 Depth=1
	setmaxnreg.dec.sync.aligned.u32 	24;
	// begin inline asm
	barrier.sync 1 ;
	// end inline asm
	// begin inline asm
	barrier.sync 1 ;
	// end inline asm
	setmaxnreg.inc.sync.aligned.u32 	80;
	bra.uni 	$L__BB0_2;
$L__BB0_4:                              //   in Loop: Header=BB0_2 Depth=1
	.loc	1 826 0                         // 01-attention-forward.py:826
	// begin inline asm
	barrier.sync 1 ;
	// end inline asm
	// begin inline asm
	barrier.sync 1 ;
	// end inline asm
	bra.uni 	$L__BB0_2;
$L__BB0_48:                             // %._crit_edge909
	.loc	1 0 0                           // 01-attention-forward.py:0:0
	// begin inline asm
	barrier.sync 1 ;
	// end inline asm
	setmaxnreg.inc.sync.aligned.u32 	256;
$L__tmp88:
	.loc	1 183 28                        // 01-attention-forward.py:183:28 @[ 01-attention-forward.py:854:4 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3257];
	// end inline asm
	.loc	1 184 28                        // 01-attention-forward.py:184:28 @[ 01-attention-forward.py:854:4 ]
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3258];
	// end inline asm
	.loc	1 183 28                        // 01-attention-forward.py:183:28 @[ 01-attention-forward.py:854:4 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3260];
	// end inline asm
	.loc	1 184 28                        // 01-attention-forward.py:184:28 @[ 01-attention-forward.py:854:4 ]
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3261];
	// end inline asm
$L__tmp89:
	.loc	1 183 28                        // 01-attention-forward.py:183:28 @[ 01-attention-forward.py:855:4 ]
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3263];
	// end inline asm
	.loc	1 184 28                        // 01-attention-forward.py:184:28 @[ 01-attention-forward.py:855:4 ]
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3264];
	// end inline asm
	.loc	1 183 28                        // 01-attention-forward.py:183:28 @[ 01-attention-forward.py:855:4 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3266];
	// end inline asm
	.loc	1 184 28                        // 01-attention-forward.py:184:28 @[ 01-attention-forward.py:855:4 ]
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3267];
	// end inline asm
	.loc	1 183 28                        // 01-attention-forward.py:183:28 @[ 01-attention-forward.py:855:4 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3269];
	// end inline asm
	.loc	1 184 28                        // 01-attention-forward.py:184:28 @[ 01-attention-forward.py:855:4 ]
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3270];
	// end inline asm
	.loc	1 183 28                        // 01-attention-forward.py:183:28 @[ 01-attention-forward.py:855:4 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3272];
	// end inline asm
	.loc	1 184 28                        // 01-attention-forward.py:184:28 @[ 01-attention-forward.py:855:4 ]
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3273];
	// end inline asm
	.loc	1 183 28                        // 01-attention-forward.py:183:28 @[ 01-attention-forward.py:855:4 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3275];
	// end inline asm
	.loc	1 184 28                        // 01-attention-forward.py:184:28 @[ 01-attention-forward.py:855:4 ]
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3276];
	// end inline asm
	.loc	1 183 28                        // 01-attention-forward.py:183:28 @[ 01-attention-forward.py:855:4 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3278];
	// end inline asm
	.loc	1 184 28                        // 01-attention-forward.py:184:28 @[ 01-attention-forward.py:855:4 ]
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3279];
	// end inline asm
	.loc	1 183 28                        // 01-attention-forward.py:183:28 @[ 01-attention-forward.py:855:4 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3281];
	// end inline asm
	.loc	1 184 28                        // 01-attention-forward.py:184:28 @[ 01-attention-forward.py:855:4 ]
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3282];
	// end inline asm
	.loc	1 183 28                        // 01-attention-forward.py:183:28 @[ 01-attention-forward.py:855:4 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3284];
	// end inline asm
	.loc	1 184 28                        // 01-attention-forward.py:184:28 @[ 01-attention-forward.py:855:4 ]
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3285];
	// end inline asm
$L__tmp90:
	.loc	1 183 28                        // 01-attention-forward.py:183:28 @[ 01-attention-forward.py:856:4 ]
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3287];
	// end inline asm
	.loc	1 184 28                        // 01-attention-forward.py:184:28 @[ 01-attention-forward.py:856:4 ]
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3288];
	// end inline asm
	.loc	1 183 28                        // 01-attention-forward.py:183:28 @[ 01-attention-forward.py:856:4 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3290];
	// end inline asm
	.loc	1 184 28                        // 01-attention-forward.py:184:28 @[ 01-attention-forward.py:856:4 ]
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3291];
	// end inline asm
$L__tmp91:
	.loc	1 183 28                        // 01-attention-forward.py:183:28 @[ 01-attention-forward.py:857:4 ]
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3293];
	// end inline asm
	.loc	1 184 28                        // 01-attention-forward.py:184:28 @[ 01-attention-forward.py:857:4 ]
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3294];
	// end inline asm
	.loc	1 183 28                        // 01-attention-forward.py:183:28 @[ 01-attention-forward.py:857:4 ]
	// begin inline asm
	barrier.sync.aligned 0, 128 ;
	// end inline asm
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3296];
	// end inline asm
	.loc	1 184 28                        // 01-attention-forward.py:184:28 @[ 01-attention-forward.py:857:4 ]
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3297];
	// end inline asm
$L__tmp92:
	.loc	1 183 28                        // 01-attention-forward.py:183:28 @[ 01-attention-forward.py:858:4 ]
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3299];
	// end inline asm
	.loc	1 184 28                        // 01-attention-forward.py:184:28 @[ 01-attention-forward.py:858:4 ]
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3300];
	// end inline asm
$L__tmp93:
	.loc	1 183 28                        // 01-attention-forward.py:183:28 @[ 01-attention-forward.py:859:4 ]
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3302];
	// end inline asm
	.loc	1 184 28                        // 01-attention-forward.py:184:28 @[ 01-attention-forward.py:859:4 ]
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3303];
	// end inline asm
$L__tmp94:
	.loc	1 183 28                        // 01-attention-forward.py:183:28 @[ 01-attention-forward.py:860:4 ]
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3305];
	// end inline asm
	.loc	1 184 28                        // 01-attention-forward.py:184:28 @[ 01-attention-forward.py:860:4 ]
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3306];
	// end inline asm
$L__tmp95:
	.loc	1 183 28                        // 01-attention-forward.py:183:28 @[ 01-attention-forward.py:861:4 ]
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3308];
	// end inline asm
	.loc	1 184 28                        // 01-attention-forward.py:184:28 @[ 01-attention-forward.py:861:4 ]
	// begin inline asm
	@%p258 mbarrier.inval.shared::cta.b64 [%r3309];
	// end inline asm
$L__tmp96:
	.loc	1 861 4                         // 01-attention-forward.py:861:4
	// begin inline asm
	@%p164 tcgen05.dealloc.cta_group::1.sync.aligned.b32 %r4849, 512;
	// end inline asm
	mov.b32 	%r4851, 101058054;
	st.shared.v2.b32 	[global_smem+98928], {%r4851, %r4851};
	st.shared.b32 	[global_smem+98936], %r4851;
	// begin inline asm
	barrier.sync 1 ;
	// end inline asm
$L__BB0_49:                             // %common.ret
	.loc	1 0 0                           // 01-attention-forward.py:0
	ret;
$L__tmp97:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/root/triton/python/tutorials/gluon/01-attention-forward.py"
	.file	2 "/root/triton/python/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 5                                   // DW_FORM_data2
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 5                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 1870                               // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x747 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 48                                  // DW_AT_name
.b8 49
.b8 45
.b8 97
.b8 116
.b8 116
.b8 101
.b8 110
.b8 116
.b8 105
.b8 111
.b8 110
.b8 45
.b8 102
.b8 111
.b8 114
.b8 119
.b8 97
.b8 114
.b8 100
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 114
.b8 111
.b8 111
.b8 116
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 47
.b8 112
.b8 121
.b8 116
.b8 104
.b8 111
.b8 110
.b8 47
.b8 116
.b8 117
.b8 116
.b8 111
.b8 114
.b8 105
.b8 97
.b8 108
.b8 115
.b8 47
.b8 103
.b8 108
.b8 117
.b8 111
.b8 110
.b8 0
.b8 2                                   // Abbrev [2] 0x55:0x12 DW_TAG_subprogram
.b8 103                                 // DW_AT_name
.b8 108
.b8 117
.b8 111
.b8 110
.b8 95
.b8 97
.b8 116
.b8 116
.b8 101
.b8 110
.b8 116
.b8 105
.b8 111
.b8 110
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x67:0x6ea DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 85                                 // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0x7c:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 67                                  // DW_AT_call_line
.b8 3
.b8 30                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x95:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp2                           // DW_AT_low_pc
.b64 $L__tmp3                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 68                                  // DW_AT_call_line
.b8 3
.b8 31                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0xae:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp3                           // DW_AT_low_pc
.b64 $L__tmp4                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 69                                  // DW_AT_call_line
.b8 3
.b8 67                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0xc7:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp4                           // DW_AT_low_pc
.b64 $L__tmp5                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 70                                  // DW_AT_call_line
.b8 3
.b8 71                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0xe0:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp5                           // DW_AT_low_pc
.b64 $L__tmp6                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 71                                  // DW_AT_call_line
.b8 3
.b8 69                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0xf9:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp6                           // DW_AT_low_pc
.b64 $L__tmp7                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 72                                  // DW_AT_call_line
.b8 3
.b8 69                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x112:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp7                           // DW_AT_low_pc
.b64 $L__tmp8                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 73                                  // DW_AT_call_line
.b8 3
.b8 54                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x12b:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp8                           // DW_AT_low_pc
.b64 $L__tmp9                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 74                                  // DW_AT_call_line
.b8 3
.b8 54                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x144:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp9                           // DW_AT_low_pc
.b64 $L__tmp10                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 28                                  // DW_AT_call_line
.b8 3
.b8 40                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x15d:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp11                          // DW_AT_low_pc
.b64 $L__tmp27                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 46                                  // DW_AT_call_line
.b8 3
.b8 68                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x176:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp13                          // DW_AT_low_pc
.b64 $L__tmp14                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 30                                  // DW_AT_call_line
.b8 3
.b8 37                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x18f:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp14                          // DW_AT_low_pc
.b64 $L__tmp15                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 34                                  // DW_AT_call_line
.b8 3
.b8 39                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x1a8:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp16                          // DW_AT_low_pc
.b64 $L__tmp17                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 36                                  // DW_AT_call_line
.b8 3
.b8 39                                  // DW_AT_call_column
.b8 5                                   // Abbrev [5] 0x1c1:0x17 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp18                          // DW_AT_low_pc
.b64 $L__tmp67                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 0                                   // DW_AT_call_line
.b8 4                                   // Abbrev [4] 0x1d8:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp20                          // DW_AT_low_pc
.b64 $L__tmp21                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 40                                  // DW_AT_call_line
.b8 3
.b8 103                                 // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x1f1:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp21                          // DW_AT_low_pc
.b64 $L__tmp22                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 41                                  // DW_AT_call_line
.b8 3
.b8 103                                 // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x20a:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp25                          // DW_AT_low_pc
.b64 $L__tmp26                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 44                                  // DW_AT_call_line
.b8 3
.b8 68                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x223:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp28                          // DW_AT_low_pc
.b64 $L__tmp29                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 176                                 // DW_AT_call_line
.b8 2
.b8 56                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x23c:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp30                          // DW_AT_low_pc
.b64 $L__tmp31                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 192                                 // DW_AT_call_line
.b8 2
.b8 40                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x255:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp32                          // DW_AT_low_pc
.b64 $L__tmp33                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 194                                 // DW_AT_call_line
.b8 2
.b8 37                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x26e:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp33                          // DW_AT_low_pc
.b64 $L__tmp34                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 196                                 // DW_AT_call_line
.b8 2
.b8 40                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x287:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp35                          // DW_AT_low_pc
.b64 $L__tmp36                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 199                                 // DW_AT_call_line
.b8 2
.b8 40                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x2a0:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp37                          // DW_AT_low_pc
.b64 $L__tmp38                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 35                                  // DW_AT_call_line
.b8 2
.b8 40                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x2b9:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp39                          // DW_AT_low_pc
.b64 $L__tmp40                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 79                                  // DW_AT_call_line
.b8 2
.b8 38                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x2d2:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp40                          // DW_AT_low_pc
.b64 $L__tmp41                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 80                                  // DW_AT_call_line
.b8 2
.b8 39                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x2eb:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp41                          // DW_AT_low_pc
.b64 $L__tmp42                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 82                                  // DW_AT_call_line
.b8 2
.b8 37                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x304:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp43                          // DW_AT_low_pc
.b64 $L__tmp44                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 41                                  // DW_AT_call_line
.b8 2
.b8 38                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x31d:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp44                          // DW_AT_low_pc
.b64 $L__tmp45                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 42                                  // DW_AT_call_line
.b8 2
.b8 37                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x336:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp45                          // DW_AT_low_pc
.b64 $L__tmp46                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 43                                  // DW_AT_call_line
.b8 2
.b8 39                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x34f:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp46                          // DW_AT_low_pc
.b64 $L__tmp47                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 44                                  // DW_AT_call_line
.b8 2
.b8 53                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x368:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp47                          // DW_AT_low_pc
.b64 $L__tmp48                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 46                                  // DW_AT_call_line
.b8 2
.b8 38                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x381:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp48                          // DW_AT_low_pc
.b64 $L__tmp49                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 47                                  // DW_AT_call_line
.b8 2
.b8 39                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x39a:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp49                          // DW_AT_low_pc
.b64 $L__tmp50                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 48                                  // DW_AT_call_line
.b8 2
.b8 53                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x3b3:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp50                          // DW_AT_low_pc
.b64 $L__tmp51                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 50                                  // DW_AT_call_line
.b8 2
.b8 37                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x3cc:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp51                          // DW_AT_low_pc
.b64 $L__tmp52                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 51                                  // DW_AT_call_line
.b8 2
.b8 38                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x3e5:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp52                          // DW_AT_low_pc
.b64 $L__tmp53                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 52                                  // DW_AT_call_line
.b8 2
.b8 39                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x3fe:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp53                          // DW_AT_low_pc
.b64 $L__tmp54                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 54                                  // DW_AT_call_line
.b8 2
.b8 37                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x417:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp56                          // DW_AT_low_pc
.b64 $L__tmp57                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 58                                  // DW_AT_call_line
.b8 2
.b8 41                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x430:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp57                          // DW_AT_low_pc
.b64 $L__tmp58                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 59                                  // DW_AT_call_line
.b8 2
.b8 57                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x449:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp58                          // DW_AT_low_pc
.b64 $L__tmp59                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 61                                  // DW_AT_call_line
.b8 2
.b8 42                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x462:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp59                          // DW_AT_low_pc
.b64 $L__tmp60                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 62                                  // DW_AT_call_line
.b8 2
.b8 43                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x47b:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp60                          // DW_AT_low_pc
.b64 $L__tmp61                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 64                                  // DW_AT_call_line
.b8 2
.b8 41                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x494:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp61                          // DW_AT_low_pc
.b64 $L__tmp62                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 67                                  // DW_AT_call_line
.b8 2
.b8 57                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x4ad:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp62                          // DW_AT_low_pc
.b64 $L__tmp63                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 69                                  // DW_AT_call_line
.b8 2
.b8 41                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x4c6:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp63                          // DW_AT_low_pc
.b64 $L__tmp64                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 70                                  // DW_AT_call_line
.b8 2
.b8 42                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x4df:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp64                          // DW_AT_low_pc
.b64 $L__tmp65                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 71                                  // DW_AT_call_line
.b8 2
.b8 43                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x4f8:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp65                          // DW_AT_low_pc
.b64 $L__tmp66                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 73                                  // DW_AT_call_line
.b8 2
.b8 41                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x511:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp68                          // DW_AT_low_pc
.b64 $L__tmp69                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 251                                 // DW_AT_call_line
.b8 1
.b8 40                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x52a:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp70                          // DW_AT_low_pc
.b64 $L__tmp71                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 253                                 // DW_AT_call_line
.b8 1
.b8 37                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x543:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp71                          // DW_AT_low_pc
.b64 $L__tmp72                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 1                                   // DW_AT_call_line
.b8 2
.b8 38                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x55c:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp72                          // DW_AT_low_pc
.b64 $L__tmp73                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 2                                   // DW_AT_call_line
.b8 2
.b8 54                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x575:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp73                          // DW_AT_low_pc
.b64 $L__tmp74                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 5                                   // DW_AT_call_line
.b8 2
.b8 37                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x58e:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp74                          // DW_AT_low_pc
.b64 $L__tmp75                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 6                                   // DW_AT_call_line
.b8 2
.b8 52                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x5a7:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp76                          // DW_AT_low_pc
.b64 $L__tmp77                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 9                                   // DW_AT_call_line
.b8 2
.b8 38                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x5c0:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp77                          // DW_AT_low_pc
.b64 $L__tmp78                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 10                                  // DW_AT_call_line
.b8 2
.b8 54                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x5d9:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp78                          // DW_AT_low_pc
.b64 $L__tmp79                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 12                                  // DW_AT_call_line
.b8 2
.b8 37                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x5f2:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp79                          // DW_AT_low_pc
.b64 $L__tmp80                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 13                                  // DW_AT_call_line
.b8 2
.b8 52                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x60b:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp81                          // DW_AT_low_pc
.b64 $L__tmp82                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 17                                  // DW_AT_call_line
.b8 2
.b8 41                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x624:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp82                          // DW_AT_low_pc
.b64 $L__tmp83                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 18                                  // DW_AT_call_line
.b8 2
.b8 56                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x63d:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp83                          // DW_AT_low_pc
.b64 $L__tmp84                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 19                                  // DW_AT_call_line
.b8 2
.b8 41                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x656:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp84                          // DW_AT_low_pc
.b64 $L__tmp85                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 20                                  // DW_AT_call_line
.b8 2
.b8 56                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x66f:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp86                          // DW_AT_low_pc
.b64 $L__tmp87                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 183                                 // DW_AT_call_line
.b8 2
.b8 56                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x688:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp88                          // DW_AT_low_pc
.b64 $L__tmp89                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 86                                  // DW_AT_call_line
.b8 3
.b8 4                                   // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x6a1:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp89                          // DW_AT_low_pc
.b64 $L__tmp90                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 87                                  // DW_AT_call_line
.b8 3
.b8 4                                   // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x6ba:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp90                          // DW_AT_low_pc
.b64 $L__tmp91                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 88                                  // DW_AT_call_line
.b8 3
.b8 4                                   // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x6d3:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp91                          // DW_AT_low_pc
.b64 $L__tmp92                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 89                                  // DW_AT_call_line
.b8 3
.b8 4                                   // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x6ec:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp92                          // DW_AT_low_pc
.b64 $L__tmp93                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 90                                  // DW_AT_call_line
.b8 3
.b8 4                                   // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x705:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp93                          // DW_AT_low_pc
.b64 $L__tmp94                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 91                                  // DW_AT_call_line
.b8 3
.b8 4                                   // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x71e:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp94                          // DW_AT_low_pc
.b64 $L__tmp95                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 92                                  // DW_AT_call_line
.b8 3
.b8 4                                   // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x737:0x19 DW_TAG_inlined_subroutine
.b32 85                                 // DW_AT_abstract_origin
.b64 $L__tmp95                          // DW_AT_low_pc
.b64 $L__tmp96                          // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 93                                  // DW_AT_call_line
.b8 3
.b8 4                                   // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
